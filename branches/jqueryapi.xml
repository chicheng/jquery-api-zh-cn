<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type='text/xsl' href='style/style.xsl'?>
<docs version="1.3">
  <cat name="核心">
    <subcat name="jQuery 核心函数">
      <method name="jQuery" type="jQuery" short="这个函数接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素。">
        <desc><![CDATA[<p>jQuery 的核心功能都是通过这个函数实现的。 jQuery中的一切都基于这个函数，或者说都是在以某种方式使用这个函数。这个函数最基本的用法就是向它传递一个表达式（通常由 CSS 选择器组成），然后根据这个表达式来查找所有匹配的元素。</p><p>默认情况下, 如果没有指定context参数，$()将在当前的 HTML 文档中查找 DOM 元素；如果指定了 context 参数，如一个 DOM 元素集或 jQuery 对象，那就会在这个 context 中查找。</p><p>参考 Selectors 获取更多用于 expression 参数的 CSS 语法的信息。</p>]]></desc>
        <param name="expression" type="String">
          <desc>用来查找的字符串</desc>
        </param>
        <param name="context" type="Element, jQuery" optional="true">
          <desc>(可选) 作为待查找的 DOM 元素集、文档或 jQuery 对象。</desc>
        </param>
        <example>
          <desc><![CDATA[找到所有 p 元素，并且这些元素都必须是 div 元素的子元素。]]></desc>
          <before><![CDATA[<p>one</p> <div><p>two</p></div> <p>three</p>]]></before>
          <code><![CDATA[$("div > p");]]></code>
          <result><![CDATA[[ <p>two</p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[在文档的第一个表单中，查找所有的单选按钮(即: type 值为 radio 的 input 元素)。]]></desc>
          <code><![CDATA[$("input:radio", document.forms[0]);]]></code>
        </example>
        <example>
          <desc><![CDATA[在一个由 AJAX 返回的 XML 文档中，查找所有的 div 元素。]]></desc>
          <code><![CDATA[$("div", xml.responseXML);]]></code>
        </example>
      </method>
      <method name="jQuery" type="jQuery" short="根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。">
        <desc><![CDATA[你可以传递一个手写的 HTML 字符串，或者由某些模板引擎或插件创建的字符串，也可以是通过 AJAX 加载过来的字符串。但是在你创建 input 元素的时会有限制，可以参考第二个示例。当然这个字符串可以包含斜杠 (比如一个图像地址)，还有反斜杠。当你创建单个元素时，请使用闭合标签或 XHTML 格式。例如，创建一个 span ，可以用 $("<span/>") 或 $("<span></span>") ，但不推荐 $("<span>")。在jQuery 中，这个语法等同于$(document.createElement("span")) 。]]></desc>
        <param name="html" type="String">
          <desc>用于动态创建DOM元素的HTML标记字符串</desc>
        </param>
        <param name="ownerDocument" type="Document" optional="true">
          <desc>可选，创建DOM元素所在的文档</desc>
        </param>
        <example>
          <desc><![CDATA[动态创建一个 div 元素（以及其中的所有内容），并将它追加到 body 元素中。在这个函数的内部，是通过临时创建一个元素，并将这个元素的 innerHTML 属性设置为给定的标记字符串，来实现标记到 DOM 元素转换的。所以，这个函数既有灵活性，也有局限性。 ]]></desc>
          <code><![CDATA[$("<div><p>Hello</p></div>").appendTo("body");]]></code>
        </example>
        <example>
          <desc><![CDATA[创建一个 <input> 元素必须同时设定 type 属性。因为微软规定 <input> 元素的 type 只能写一次。]]></desc>
          <code><![CDATA[// 在 IE 中无效:
$("<input>").attr("type", "checkbox");
// 在 IE 中有效:
$("<input type='checkbox'>");]]></code>
        </example>
      </method>
      <method name="jQuery" type="jQuery" short="将一个或多个DOM元素转化为jQuery对象。">
        <desc><![CDATA[这个函数也可以接收XML文档和Window对象（虽然它们不是DOM元素）作为有效的参数。]]></desc>
        <param name="elements" type="Element, Array&lt;Element&gt;">
          <desc>用于封装成jQuery对象的DOM元素</desc>
        </param>
        <example>
          <desc><![CDATA[设置页面背景色。]]></desc>
          <code><![CDATA[$(document.body).css( "background", "black" );]]></code>
        </example>
        <example>
          <desc><![CDATA[隐藏一个表单中所有元素。]]></desc>
          <code><![CDATA[$(myForm.elements).hide()]]></code>
        </example>
      </method>
      <method name="jQuery" type="jQuery" short="$(document).ready()的简写。">
        <desc><![CDATA[<p>允许你绑定一个在DOM文档载入完成后执行的函数。这个函数的作用如同$(document).ready()一样，只不过用这个函数时，需要把页面中所有需要在 DOM 加载完成时执行的$()操作符都包装到其中来。从技术上来说，这个函数是可链接的－－但真正以这种方式链接的情况并不多。</p><p>你可以在一个页面中使用任意多个$(document).ready事件。</p>参考 ready(Function) 获取更多 ready 事件的信息。]]></desc>
        <param name="callback" type="Function">
          <desc>当DOM加载完成后要执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[当DOM加载完成后，执行其中的函数。]]></desc>
          <code><![CDATA[$(function(){
  // 文档就绪
});]]></code>
        </example>
        <example>
          <desc><![CDATA[使用 $(document).ready() 的简写，同时内部的 jQuery 代码依然使用 $ 作为别名，而不管全局的 $ 为何。]]></desc>
          <code><![CDATA[jQuery(function($) {
  // 你可以在这里继续使用$作为别名...
});]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="jQuery 对象访问">
      <method name="each" type="jQuery" short="以每一个匹配的元素作为上下文来执行一个函数。">
        <desc><![CDATA[意味着，每次执行传递进来的函数时，函数中的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。<p>而且，在每次执行函数时，都会给函数传递一个表示作为执行环境的元素在匹配的元素集合中所处位置的数字值作为参数（从零开始的整形）。 </p>返回 'false' 将停止循环 (就像在普通的循环中使用 'break')。返回 'true' 跳至下一个循环(就像在普通的循环中使用'continue')。]]></desc>
        <param name="callback" type="Function">
          <desc>对于每个匹配的元素所要执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[迭代两个图像，并设置它们的 src 属性。注意:此处 this 指代的是 DOM 对象而非 jQuery 对象。]]></desc>
          <before><![CDATA[<img/><img/> ]]></before>
          <code><![CDATA[$("img").each(function(i){
   this.src = "test" + i + ".jpg";
 });]]></code>
          <result><![CDATA[[ <img src="test0.jpg" />, <img src="test1.jpg" /> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[如果你想得到 jQuery对象，可以使用 $(this) 函数。 ]]></desc>
          <before><![CDATA[<button>Change colors</button>
<span></span> 
<div></div> 
<div></div>

<div></div> 
<div></div>
<div id="stop">Stop here</div> 
<div></div>

<div></div>
<div></div>
                ]]></before>
          <code><![CDATA[$("img").each(function(){
  $(this).toggleClass("example");
});]]></code>
        </example>
        <example>
          <desc><![CDATA[你可以使用 'return' 来提前跳出 each() 循环。]]></desc>
          <before><![CDATA[<button>Change colors</button>
<span></span> 
<div></div> 
<div></div>

<div></div> 
<div></div>
<div id="stop">Stop here</div> 
<div></div>

<div></div>
<div></div>
                ]]></before>
          <code><![CDATA[$("button").click(function () { 
$("div").each(function (index, domEle) { 
  // domEle == this 
  $(domEle).css("backgroundColor", "yellow");  
  if ($(this).is("#stop")) { 
  $("span").text("Stopped at div index #" + index); 
  return false; 
  } 
});
});]]></code>
        </example>
      </method>
      <method name="size" type="Number" short="jQuery 对象中元素的个数。">
        <desc><![CDATA[这个函数的返回值与 jQuery 对象的'<span title="Core/length">length</span>' 属性一致。]]></desc>
        <example>
          <desc><![CDATA[计算文档中所有图片数量]]></desc>
          <before><![CDATA[<img src="test1.jpg"/> <img src="test2.jpg"/>]]></before>
          <code><![CDATA[$("img").size();]]></code>
          <result><![CDATA[2]]></result>
        </example>
      </method>
      <method name="length" type="Number" short="jQuery 对象中元素的个数。">
        <desc><![CDATA[当前匹配的元素个数。 <span title="Core/size">size</span> 将返回相同的值。]]></desc>
        <example>
          <desc><![CDATA[计算文档中所有图片数量]]></desc>
          <before><![CDATA[<img src="test1.jpg"/> <img src="test2.jpg"/>]]></before>
          <code><![CDATA[$("img").length;]]></code>
          <result><![CDATA[2]]></result>
        </example>
      </method>
      <method name="selector" type="Striing" short="jQuery 1.3新增。返回传给jQuery()的原始选择器。">
        <desc><![CDATA[换句话说，就是返回你用什么选择器来找到这个元素的。可以与<span title="Core/context">context</span>一起使用，用于精确检测选择器查询情况。这两个属性对插件开发人员很有用。]]></desc>
        <example>
          <desc><![CDATA[确定查询的选择器]]></desc>
          <code><![CDATA[$("ul")
  .append("<li>" + $("ul").selector + "</li>")
  .append("<li>" + $("ul li").selector + "</li>")
  .append("<li>" + $("div#foo ul:not([class])").selector + "</li>");
]]></code>
          <result><![CDATA[ul
ul li
div#foo ul:not([class])]]></result>
        </example>
      </method>
      <method name="context" type="HTMLElement" short="jQuery 1.3新增。返回传给jQuery()的原始的DOM节点内容，即jQuery()的第二个参数。如果没有指定，那么context指向当前的文档(document)。">
        <desc><![CDATA[可以与<span title="Core/selector">selector</span>一起使用，用于精确检测选择器查询情况。这两个属性对插件开发人员很有用。]]></desc>
        <example>
          <desc><![CDATA[检测使用的文档内容]]></desc>
          <code><![CDATA[$("ul")
  .append("<li>" + $("ul").context + "</li>")
  .append("<li>" + $("ul", document.body).context.nodeName + "</li>");]]></code>
          <result><![CDATA[[object HTMLDocument]  //如果是IE浏览器，则返回[object]
BODY]]></result>
        </example>
      </method>
      <method name="get" type="Array&lt;Element&gt;" short="取得所有匹配的 DOM 元素集合。">
        <desc><![CDATA[<p>这是取得所有匹配元素的一种向后兼容的方式（不同于jQuery对象，而实际上是元素数组）。</p><p>如果你想要直接操作 DOM 对象而不是 jQuery 对象，这个函数非常有用。</p>]]></desc>
        <example>
          <desc><![CDATA[选择文档中所有图像作为元素数组，并用数组内建的 reverse 方法将数组反向。]]></desc>
          <before><![CDATA[<img src="test1.jpg"/> <img src="test2.jpg"/> ]]></before>
          <code><![CDATA[$("img").get().reverse(); ]]></code>
          <result><![CDATA[  [ <img src="test2.jpg"/> <img src="test1.jpg"/> ]]]></result>
        </example>
      </method>
      <method name="get" type="Element" short="取得其中一个匹配的元素。 num表示取得第几个匹配的元素。">
        <desc><![CDATA[这能够让你选择一个实际的DOM 元素并且对他直接操作，而不是通过 jQuery 函数。$(this).get(0)与$(this)[0]等价。]]></desc>
        <param name="index" type="Number">
          <desc>取得第 index 个位置上的元素</desc>
        </param>
        <example>
          <desc><![CDATA[]]></desc>
          <before><![CDATA[<img src="test1.jpg"/> <img src="test2.jpg"/> ]]></before>
          <code><![CDATA[$("img").get(0); ]]></code>
          <result><![CDATA[[ <img src="test1.jpg"/> ]]]></result>
        </example>
      </method>
      <method name="index" type="Number" short="搜索与参数表示的对象匹配的元素，并返回相应元素的索引值。">
        <desc><![CDATA[如果找到了匹配的元素，从0开始返回；如果没有找到匹配的元素，返回-1。]]></desc>
        <param name="subject" type="Element">
          <desc>要搜索的对象</desc>
        </param>
        <example>
          <desc><![CDATA[返回ID值为foobar的元素的索引值。 ]]></desc>
          <before><![CDATA[<div id="foobar"><div></div><div id="foo"></div></div> ]]></before>
          <code><![CDATA[$("div").index($('#foobar')[0])  // 0
$("div").index($('#foo')[0])  // 2
$("div").index($('#foo'))  // -1]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="数据缓存">
      <method name="data" type="Any" short="返回元素上储存的相应名字的数据，可以用data(name, value)来设定。">
        <desc><![CDATA[<p>如果jQuery集合指向多个元素，那将只返回第一个元素的对应数据。</p><p>这个函数可以用于在一个元素上存取数据而避免了循环引用的风险。jQuery.data是1.2.3版的新功能。你可以在很多地方使用这个函数，另外jQuery UI里经常使用这个函数。</p>]]></desc>
        <param name="name" type="String">
          <desc>存储的数据名</desc>
        </param>
        <example>
          <desc><![CDATA[在一个div上存取数据]]></desc>
          <before><![CDATA[<div></div>]]></before>
          <code><![CDATA[$("div").data("blah");  // undefined
$("div").data("blah", "hello");  // blah设置为hello
$("div").data("blah");  // hello
$("div").data("blah", 86);  // 设置为86
$("div").data("blah");  //  86
$("div").removeData("blah");  //移除blah
$("div").data("blah");  // undefined]]></code>
        </example>
        <example>
          <desc><![CDATA[在一个div上存取名/值对数据]]></desc>
          <before><![CDATA[<div></div>]]></before>
          <code><![CDATA[$("div").data("test", { first: 16, last: "pizza!" });
$("div").data("test").first  //16;
$("div").data("test").last  //pizza!;]]></code>
        </example>
      </method>
      <method name="data" type="Any" short="在元素上存放数据，同时也返回value。">
        <desc><![CDATA[<p>如果jQuery集合指向多个元素，那将在所有元素上设置对应数据。</p><p>这个函数不用建立一个新的expando，就能在一个元素上存放任何格式的数据，而不仅仅是字符串。</p>]]></desc>
        <param name="name" type="String">
          <desc>存储的数据名</desc>
        </param>
        <param name="value" type="Any">
          <desc>将要存储的任意数据</desc>
        </param>
        <example>
          <desc><![CDATA[参考data(name)的示例]]></desc>
        </example>
      </method>
      <method name="removeData" type="jQuery" short="在元素上移除存放的数据">
        <desc><![CDATA[与$(...).data(name, value)函数作用相反]]></desc>
        <param name="name" type="String">
          <desc>存储的数据名</desc>
        </param>
        <example>
          <desc><![CDATA[参考data(name)的示例]]></desc>
        </example>
      </method>
      <method name="queue" type="Array&lt;Function&gt;" short="返回指向第一个匹配元素的队列(将是一个函数数组)">
        <param name="name" type="String">
          <desc>队列名，默认为fx</desc>
        </param>
        <example>
          <desc><![CDATA[显示队列长度]]></desc>
          <before><![CDATA[  <style>
  div { margin:3px; width:40px; height:40px;
        position:absolute; left:0px; top:30px; 
        background:green; display:none; }
  div.newcolor { background:blue; }
  span { color:red; }
  </style>
  <button id="show">Show Length of Queue</button>
  <span></span>
  <div></div>]]></before>
          <code><![CDATA[$("#show").click(function () {
      var n = $("div").queue("fx");
      $("span").text("Queue length is: " + n.length);
});
function runIt() {
      $("div").show("slow");
      $("div").animate({left:'+=200'},2000);
      $("div").slideToggle(1000);
      $("div").slideToggle("fast");
      $("div").animate({left:'-=200'},1500);
      $("div").hide("slow");
      $("div").show(1200);
      $("div").slideUp("normal", runIt);
}
runIt();]]></code>
        </example>
      </method>
      <method name="queue" type="jQuery" short="在匹配的元素的队列最后添加一个函数">
        <param name="name" type="String">
          <desc>队列名，默认为fx</desc>
        </param>
        <param name="callback" type="Function">
          <desc>要添加进队列的函数</desc>
        </param>
        <example>
          <desc><![CDATA[插入一个自定义函数
如果函数执行后要继续队列，则执行 jQuery(this).dequeue();]]></desc>
          <before><![CDATA[  <style>
  div { margin:3px; width:40px; height:40px;
        position:absolute; left:0px; top:30px; 
        background:green; display:none; }
  div.newcolor { background:blue; }
  </style>
  Click here...
  <div></div>]]></before>
          <code><![CDATA[$(document.body).click(function () {
      $("div").show("slow");
      $("div").animate({left:'+=200'},2000);
      $("div").queue(function () {
          $(this).addClass("newcolor");
          $(this).dequeue();
      });
      $("div").animate({left:'-=200'},500);
      $("div").queue(function () {
          $(this).removeClass("newcolor");
          $(this).dequeue();
      });
      $("div").slideUp();
});
]]></code>
        </example>
      </method>
      <method name="queue" type="jQuery" short="将匹配元素的队列用新的一个队列来代替(函数数组).">
        <param name="name" type="String">
          <desc>队列名，默认为fx</desc>
        </param>
        <param name="queue" type="Array&lt;Function&gt;">
          <desc>用于替换的队列。所有函数都有同一个参数，这个值与queue(callback)相同</desc>
        </param>
        <example>
          <desc><![CDATA[通过设定队列数组来删除动画队列]]></desc>
          <before><![CDATA[  <style>
  div { margin:3px; width:40px; height:40px;
        position:absolute; left:0px; top:30px; 
        background:green; display:none; }
  div.newcolor { background:blue; }
  </style>

  <button id="start">Start</button>
  <button id="stop">Stop</button>
  <div></div>]]></before>
          <code><![CDATA[  $("#start").click(function () {
      $("div").show("slow");
      $("div").animate({left:'+=200'},5000);
      $("div").queue(function () {
          $(this).addClass("newcolor");
          $(this).dequeue();
      });
      $("div").animate({left:'-=200'},1500);
      $("div").queue(function () {
          $(this).removeClass("newcolor");
          $(this).dequeue();
      });
      $("div").slideUp();
  });
  $("#stop").click(function () {
      $("div").queue("fx", []);
      $("div").stop();
  });]]></code>
        </example>
      </method>
      <method name="dequeue" type="jQuery" short="从队列最前端移除一个队列函数，并执行他。">
        <param name="name" type="String">
          <desc>队列名，默认为fx</desc>
        </param>
        <example>
          <desc><![CDATA[用dequeue来结束自定义队列函数，并让队列继续进行下去。]]></desc>
          <before><![CDATA[  <style>
  div { margin:3px; width:50px; position:absolute;
        height:50px; left:10px; top:30px; 
        background-color:yellow; }
  div.red { background-color:red; }
  </style>

  <button>Start</button>
  <div></div>]]></before>
          <code><![CDATA[  $("button").click(function () {
      $("div").animate({left:'+=200px'}, 2000);
      $("div").animate({top:'0px'}, 600);
      $("div").queue(function () {
          $(this).toggleClass("red");
          $(this).dequeue();
      });
      $("div").animate({left:'10px', top:'30px'}, 700);
  });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="插件机制">
      <method name="jQuery.fn.extend" type="jQuery" short="扩展 jQuery 元素集来提供新的方法（通常用来制作插件）。">
        <desc><![CDATA[查看这里<a href="http://docs.jquery.com/Plugins/Authoring" title="Plugins/Authoring">Plugins/Authoring</a>可以获取更多信息。]]></desc>
        <param name="object" type="Object">
          <desc>用来扩充 jQuery 对象。</desc>
        </param>
        <example>
          <desc><![CDATA[增加两个插件方法。]]></desc>
          <code><![CDATA[jQuery.fn.extend({
  check: function() {
    return this.each(function() { this.checked = true; });
  },
  uncheck: function() {
    return this.each(function() { this.checked = false; });
  }
});]]></code>
          <result><![CDATA[$("input[type=checkbox]").check();
$("input[type=radio]").uncheck(); ]]></result>
        </example>
      </method>
      <method name="jQuery.extend" type="jQuery" short="扩展jQuery对象本身。">
        <desc><![CDATA[用来在jQuery命名空间上增加新函数。 查看 <span title="Core/jQuery.fn.extend">'jQuery.fn.extend'</span> 获取更多添加<a href="http://docs.jquery.com/Plugins/Authoring" title="Plugins/Authoring">插件</a>的信息。]]></desc>
        <param name="object" type="Object">
          <desc>用以扩展 jQuery 对象</desc>
        </param>
        <example>
          <desc><![CDATA[在jQuery命名空间上增加两个函数。 ]]></desc>
          <code><![CDATA[jQuery.extend({
  min: function(a, b) { return a < b ? a : b; },
  max: function(a, b) { return a > b ? a : b; }
});]]></code>
          <result><![CDATA[jQuery.min(2,3); // => 2
jQuery.max(4,5); // => 5 ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="多库共存">
      <method name="jQuery.noConflict" type="jQuery" short="运行这个函数将变量$的控制权让渡给第一个实现它的那个库。">
        <desc><![CDATA[<p>这有助于确保jQuery不会与其他库的$对象发生冲突。</p><p>在运行这个函数后，就只能使用jQuery变量访问jQuery对象。例如，在要用到$("div p")的地方，就必须换成jQuery("div p")。</p><p><strong>注意:</strong>这个函数必须在你导入jQuery文件之后，并且在导入另一个导致冲突的库<strong>之前</strong>使用。当然也应当在其他冲突的库被使用之前，除非jQuery是最后一个导入的。</p>]]></desc>
        <example>
          <desc><![CDATA[将$引用的对象映射回原始的对象。]]></desc>
          <code><![CDATA[jQuery.noConflict();
// 使用 jQuery
jQuery("div p").hide();
// 使用其他库的 $()
$("content").style.display = 'none'; ]]></code>
        </example>
        <example>
          <desc><![CDATA[恢复使用别名$，然后创建并执行一个函数，在这个函数的作用域中仍然将$作为jQuery的别名来使用。在这个函数中，原来的$对象是无效的。这个函数对于大多数不依赖于其他库的插件都十分有效。]]></desc>
          <code><![CDATA[jQuery.noConflict();
(function($) { 
  $(function() {
    // 使用 $ 作为 jQuery 别名的代码
  });
})(jQuery);
// 其他用 $ 作为别名的库的代码  ]]></code>
        </example>
        <example>
          <desc><![CDATA[创建一个新的别名用以在接下来的库中使用jQuery对象。]]></desc>
          <code><![CDATA[var j = jQuery.noConflict();
// 基于 jQuery 的代码
j("div p").hide();
// 基于其他库的 $() 代码
$("content").style.display = 'none'; ]]></code>
        </example>
      </method>
      <method name="jQuery.noConflict" type="jQuery" short="将$和jQuery的控制权都交还给原来的库。用之前请考虑清楚!">
        <desc><![CDATA[这是相对于简单的 <strong>noConflict</strong> 方法更极端的版本，因为这将完全重新定义jQuery。这通常用于一种极端的情况，比如你想要将jQuery嵌入一个高度冲突的环境。<strong>注意:</strong>调用此方法后极有可能导致插件失效。]]></desc>
        <param name="extreme" type="Boolean">
          <desc>传入 true 来允许彻底将jQuery变量还原</desc>
        </param>
        <example>
          <desc><![CDATA[完全将 jQuery 移到一个新的命名空间。]]></desc>
          <code><![CDATA[var dom = {};
dom.query = jQuery.noConflict(true); ]]></code>
          <result><![CDATA[// 新 jQuery 的代码
dom.query("div p").hide();
// 另一个库 $() 的代码
$("content").style.display = 'none';
// 另一个版本 jQuery 的代码
jQuery("div > p").hide(); ]]></result>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="选择器">
    <subcat name="基本">
      <method name="#id" type="Element" short="根据给定的ID匹配一个元素。">
        <desc><![CDATA[如果选择器中包含特殊字符，可以用两个斜杠转义。参见示例。]]></desc>
        <param name="id" type="String">
          <desc>用于搜索的，通过元素的 id 属性中给定的值</desc>
        </param>
        <example>
          <desc><![CDATA[查找 ID 为"myDiv"的元素。 ]]></desc>
          <before><![CDATA[<div id="notMe"><p>id="notMe"</p></div>
<div id="myDiv">id="myDiv"</div> ]]></before>
          <code><![CDATA[$("#myDiv"); ]]></code>
          <result><![CDATA[[ <div id="myDiv">id="myDiv"</div> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[查找含有特殊字符的元素 ]]></desc>
          <before><![CDATA[<span id="foo:bar"></span>
<span id="foo[bar]"></span>
<span id="foo.bar"></span>]]></before>
          <code><![CDATA[#foo\\:bar
#foo\\[bar\\]
#foo\\.bar]]></code>
        </example>
      </method>
      <method name="element" type="Array&lt;Element&gt;" short="根据给定的元素名匹配所有元素">
        <param name="element" type="String">
          <desc>一个用于搜索的元素。指向 DOM 节点的标签名。</desc>
        </param>
        <example>
          <desc><![CDATA[查找一个 DIV 元素。 ]]></desc>
          <before><![CDATA[<div>DIV1</div>
<div>DIV2</div>
<span>SPAN</span> ]]></before>
          <code><![CDATA[$("div"); ]]></code>
          <result><![CDATA[[ <div>DIV1</div>, <div>DIV2</div> ] ]]></result>
        </example>
      </method>
      <method name=".class" type="Array&lt;Element&gt;" short="根据给定的类匹配元素。">
        <param name="class" type="String">
          <desc>一个用以搜索的类。一个元素可以有多个类，只要有一个符合就能被匹配到。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有类是 "myClass" 的元素. ]]></desc>
          <before><![CDATA[<div class="notMe">div class="notMe"</div>
<div class="myClass">div class="myClass"</div>
<span class="myClass">span class="myClass"</span> ]]></before>
          <code><![CDATA[$(".myClass"); ]]></code>
          <result><![CDATA[[ <div class="myClass">div class="myClass"</div>, <span class="myClass">span class="myClass"</span> ] ]]></result>
        </example>
      </method>
      <method name="*" type="Array&lt;Element&gt;" short="匹配所有元素">
        <desc><![CDATA[多用于结合上下文来搜索。]]></desc>
        <example>
          <desc><![CDATA[找到每一个元素]]></desc>
          <before><![CDATA[<div>DIV</div>
<span>SPAN</span>
<p>P</p> ]]></before>
          <code><![CDATA[$("*") ]]></code>
          <result><![CDATA[[ <div>DIV</div>, <span>SPAN</span>, <p>P</p> ] ]]></result>
        </example>
      </method>
      <method name="selector1,selector2,selectorN" type="Array&lt;Element&gt;" short="将每一个选择器匹配到的元素合并后一起返回。">
        <desc><![CDATA[你可以指定任意多个选择器，并将匹配到的元素合并到一个结果内。]]></desc>
        <param name="selector1" type="Selector">
          <desc>一个有效的选择器</desc>
        </param>
        <param name="selector2" type="Selector">
          <desc>另一个有效的选择器</desc>
        </param>
        <param name="selectorN" type="Selector" optional="true">
          <desc>(可选) 任意多个有效选择器</desc>
        </param>
        <example>
          <desc><![CDATA[找到匹配任意一个类的元素。]]></desc>
          <before><![CDATA[<div>div</div>
<p class="myClass">p class="myClass"</p>
<span>span</span>
<p class="notMyClass">p class="notMyClass"</p> ]]></before>
          <code><![CDATA[$("div,span,p.myClass") ]]></code>
          <result><![CDATA[[ <div>div</div>, <p class="myClass">p class="myClass"</p>, <span>span</span> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="层级">
      <method name="ancestor descendant" type="Array&lt;Element&gt;" short="在给定的祖先元素下匹配所有的后代元素">
        <param name="ancestor" type="Selector">
          <desc>任何有效选择器</desc>
        </param>
        <param name="descendant" type="Selector">
          <desc>用以匹配元素的选择器，并且它是第一个选择器的后代元素</desc>
        </param>
        <example>
          <desc><![CDATA[找到表单中所有的 input 元素]]></desc>
          <before><![CDATA[<form>
  <label>Name:</label>
  <input name="name" />
  <fieldset>
      <label>Newsletter:</label>
      <input name="newsletter" />
 </fieldset>
</form>
<input name="none" /> ]]></before>
          <code><![CDATA[$("form input") ]]></code>
          <result><![CDATA[[ <input name="name" />, <input name="newsletter" /> ] ]]></result>
        </example>
      </method>
      <method name="parent > child" type="Array&lt;Element&gt;" short="在给定的父元素下匹配所有的子元素">
        <param name="parent" type="Selector">
          <desc>任何有效选择器</desc>
        </param>
        <param name="child" type="Selector">
          <desc>用以匹配元素的选择器，并且它是第一个选择器的子元素</desc>
        </param>
        <example>
          <desc><![CDATA[匹配表单中所有的子级input元素。 ]]></desc>
          <before><![CDATA[<form>
  <label>Name:</label>
  <input name="name" />
  <fieldset>
      <label>Newsletter:</label>
      <input name="newsletter" />
 </fieldset>
</form>
<input name="none" /> ]]></before>
          <code><![CDATA[$("form > input") ]]></code>
          <result><![CDATA[[ <input name="name" /> ]]]></result>
        </example>
      </method>
      <method name="prev + next" type="Array&lt;Element&gt;" short="匹配所有紧接在 prev 元素后的 next 元素">
        <param name="prev" type="Selector">
          <desc>任何有效选择器</desc>
        </param>
        <param name="next" type="Selector">
          <desc>一个有效选择器并且紧接着第一个选择器</desc>
        </param>
        <example>
          <desc><![CDATA[匹配所有跟在 label 后面的 input 元素 ]]></desc>
          <before><![CDATA[<form>
  <label>Name:</label>
  <input name="name" />
  <fieldset>
      <label>Newsletter:</label>
      <input name="newsletter" />
 </fieldset>
</form>
<input name="none" /> ]]></before>
          <code><![CDATA[$("label + input") ]]></code>
          <result><![CDATA[[ <input name="name" />, <input name="newsletter" /> ] ]]></result>
        </example>
      </method>
      <method name="prev ~ siblings" type="Array&lt;Element&gt;" short="匹配 prev 元素之后的所有 siblings 元素">
        <param name="prev" type="Selector">
          <desc>任何有效选择器</desc>
        </param>
        <param name="siblings" type="Selector">
          <desc>一个选择器，并且它作为第一个选择器的同辈</desc>
        </param>
        <example>
          <desc><![CDATA[找到所有与表单同辈的 input 元素]]></desc>
          <before><![CDATA[<form>
  <label>Name:</label>
  <input name="name" />
  <fieldset>
      <label>Newsletter:</label>
      <input name="newsletter" />
 </fieldset>
</form>
<input name="none" /> ]]></before>
          <code><![CDATA[$("form ~ input") ]]></code>
          <result><![CDATA[[ <input name="none" /> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="简单">
      <method name=":first" type="Element" short="匹配找到的第一个元素">
        <example>
          <desc><![CDATA[查找表格的第一行]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:first") ]]></code>
          <result><![CDATA[[ <tr><td>Header 1</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":last" type="Element" short="匹配找到的最后一个元素">
        <example>
          <desc><![CDATA[查找表格的最后一行]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:last") ]]></code>
          <result><![CDATA[[ <tr><td>Value 2</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":not" type="Array&lt;Element&gt;" short="去除所有与给定选择器匹配的元素">
        <desc><![CDATA[在jQuery 1.3中，已经支持复杂选择器了（例如:not(div a) 和 :not(div,a)）]]></desc>
        <param name="selector" type="Selector">
          <desc>用于筛选的选择器</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有未选中的 input 元素]]></desc>
          <before><![CDATA[<input name="apple" />
<input name="flower" checked="checked" /> ]]></before>
          <code><![CDATA[$("input:not(:checked)") ]]></code>
          <result><![CDATA[[ <input name="apple" /> ] ]]></result>
        </example>
      </method>
      <method name=":even" type="Array&lt;Element&gt;" short="匹配所有索引值为偶数的元素，从 0 开始计数">
        <example>
          <desc><![CDATA[查找表格的1、3、5...行（即索引值0、2、4...）]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:even") ]]></code>
          <result><![CDATA[[ <tr><td>Header 1</td></tr>, <tr><td>Value 2</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":odd" type="Array&lt;Element&gt;" short="匹配所有索引值为奇数的元素，从 0 开始计数">
        <example>
          <desc><![CDATA[查找表格的2、4、6行（即索引值1、3、5...）]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:odd") ]]></code>
          <result><![CDATA[[ <tr><td>Value 1</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":eq" type="Element" short="匹配一个给定索引值的元素">
        <param name="index" type="Number">
          <desc>从 0 开始计数</desc>
        </param>
        <example>
          <desc><![CDATA[查找第二行]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:eq(1)") ]]></code>
          <result><![CDATA[[ <tr><td>Value 1</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":gt" type="Array&lt;Element&gt;" short="匹配所有大于给定索引值的元素">
        <param name="index" type="Number">
          <desc>从 0 开始计数</desc>
        </param>
        <example>
          <desc><![CDATA[查找第二第三行，即索引值是1和2，也就是比0大]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:gt(0)") ]]></code>
          <result><![CDATA[[ <tr><td>Value 1</td></tr>, <tr><td>Value 2</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":lt" type="Array&lt;Element&gt;" short="匹配所有小于给定索引值的元素">
        <param name="index" type="Number">
          <desc>从 0 开始计数</desc>
        </param>
        <example>
          <desc><![CDATA[查找第一第二行，即索引值是0和1，也就是比2小]]></desc>
          <before><![CDATA[<table>
  <tr><td>Header 1</td></tr>
  <tr><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:lt(2)") ]]></code>
          <result><![CDATA[[ <tr><td>Header 1</td></tr>, <tr><td>Value 1</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":header" type="Array&lt;Element&gt;" short="匹配如 h1, h2, h3之类的标题元素">
        <example>
          <desc><![CDATA[给页面内所有标题加上背景色]]></desc>
          <before><![CDATA[<h1>Header 1</h1>
<p>Contents 1</p>
<h2>Header 2</h2>
<p>Contents 2</p> ]]></before>
          <code><![CDATA[$(":header").css("background", "#EEE"); ]]></code>
          <result><![CDATA[[ <h1 style="background:#EEE;">Header 1</h1>, <h2 style="background:#EEE;">Header 2</h2> ] ]]></result>
        </example>
      </method>
      <method name=":animated" type="Array&lt;Element&gt;" short="匹配所有正在执行动画效果的元素">
        <example>
          <desc><![CDATA[只有对不在执行动画效果的元素执行一个动画特效]]></desc>
          <before><![CDATA[<button id="run">Run</button><div></div> ]]></before>
          <code><![CDATA[$("#run").click(function(){
  $("div:not(:animated)").animate({ left: "+=20" }, 1000);
});]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="内容">
      <method name=":contains" type="Array&lt;Element&gt;" short="匹配包含给定文本的元素">
        <param name="text" type="String">
          <desc>一个用以查找的字符串</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有包含 "John" 的 div 元素]]></desc>
          <before><![CDATA[<div>John Resig</div>
<div>George Martin</div>
<div>Malcom John Sinclair</div>
<div>J. Ohn ]]></before>
          <code><![CDATA[$("div:contains('John')") ]]></code>
          <result><![CDATA[[ <div>John Resig</div>, <div>Malcom John Sinclair</div> ] ]]></result>
        </example>
      </method>
      <method name=":empty" type="Array&lt;Element&gt;" short="匹配所有不包含子元素或者文本的空元素">
        <example>
          <desc><![CDATA[查找所有不包含子元素或者文本的空元素]]></desc>
          <before><![CDATA[<table>
  <tr><td>Value 1</td><td></td></tr>
  <tr><td>Value 2</td><td></td></tr>
</table> ]]></before>
          <code><![CDATA[$("td:empty") ]]></code>
          <result><![CDATA[[ <td></td>, <td></td> ] ]]></result>
        </example>
      </method>
      <method name=":has" type="Array&lt;Element&gt;" short="匹配含有选择器所匹配的元素的元素">
        <param name="selector" type="Selector">
          <desc>一个用于筛选的选择器</desc>
        </param>
        <example>
          <desc><![CDATA[给所有包含 p 元素的 div 元素添加一个 text 类]]></desc>
          <before><![CDATA[<div><p>Hello</p></div>
<div>Hello again!</div> ]]></before>
          <code><![CDATA[$("div:has(p)").addClass("test"); ]]></code>
          <result><![CDATA[[ <div class="test"><p>Hello</p></div> ] ]]></result>
        </example>
      </method>
      <method name=":parent" type="Array&lt;Element&gt;" short="匹配含有子元素或者文本的元素">
        <example>
          <desc><![CDATA[查找所有含有子元素或者文本的 td 元素]]></desc>
          <before><![CDATA[<table>
  <tr><td>Value 1</td><td></td></tr>
  <tr><td>Value 2</td><td></td></tr>
</table> ]]></before>
          <code><![CDATA[$("td:parent") ]]></code>
          <result><![CDATA[[ <td>Value 1</td>, <td>Value 1</td> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="可见性">
      <method name=":hidden" type="Array&lt;Element&gt;" short="匹配所有的不可见元素，input 元素的 type 属性为 &quot;hidden&quot; 的话也会被匹配到">
        <example>
          <desc><![CDATA[查找所有不可见的 tr 元素]]></desc>
          <before><![CDATA[<table>
  <tr style="display:none"><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:hidden") ]]></code>
          <result><![CDATA[[ <tr style="display:none"><td>Value 1</td></tr> ] ]]></result>
        </example>
      </method>
      <method name=":visible" type="Array&lt;Element&gt;" short="匹配所有的可见元素">
        <example>
          <desc><![CDATA[查找所有可见的 tr 元素]]></desc>
          <before><![CDATA[<table>
  <tr style="display:none"><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:visible") ]]></code>
          <result><![CDATA[[ <tr><td>Value 2</td></tr> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="属性">
      <method name="[attribute]" type="Array&lt;Element&gt;" short="匹配包含给定属性的元素。注意，在jQuery 1.3中，前导的@符号已经被废除！如果想要兼容最新版本，只需要简单去掉@符号即可。">
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有含有 id 属性的 div 元素]]></desc>
          <before><![CDATA[<div>
  <p>Hello!</p>
</div>
<div id="test2"></div> ]]></before>
          <code><![CDATA[$("div[id]") ]]></code>
          <result><![CDATA[[ <div id="test2"></div> ] ]]></result>
        </example>
      </method>
      <method name="[attribute=value]" type="Array&lt;Element&gt;" short="匹配给定的属性是某个特定值的元素">
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String" optional="true">
          <desc>属性值。引号在大多数情况下是可选的。但在遇到诸如属性值包含"]"时，用以避免冲突。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有 name 属性是 newsletter 的 input 元素]]></desc>
          <before><![CDATA[<input type="checkbox" name="newsletter" value="Hot Fuzz" />
<input type="checkbox" name="newsletter" value="Cold Fusion" />
<input type="checkbox" name="accept" value="Evil Plans" /> ]]></before>
          <code><![CDATA[$("input[name='newsletter']").attr("checked", true); ]]></code>
          <result><![CDATA[[ <input type="checkbox" name="newsletter" value="Hot Fuzz" checked="true" />, <input type="checkbox" name="newsletter" value="Cold Fusion" checked="true" /> ] ]]></result>
        </example>
      </method>
      <method name="[attribute!=value]" type="Array&lt;Element&gt;" short="匹配所有含有指定的属性，但属性不等于特定值的元素。">
        <desc><![CDATA[在jQuery 1.3之前是这样的："匹配那些没有指定的属性的元素，或者指定的属性不等于特定值的元素。"，这等价于:not([attr=value])]]></desc>
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String" optional="true">
          <desc>属性值。引号在大多数情况下是可选的。但在遇到诸如属性值包含"]"时，用以避免冲突。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有 name 属性不是 newsletter 的 input 元素]]></desc>
          <before><![CDATA[<input type="checkbox" name="newsletter" value="Hot Fuzz" />
<input type="checkbox" name="newsletter" value="Cold Fusion" />
<input type="checkbox" name="accept" value="Evil Plans" /> ]]></before>
          <code><![CDATA[$("input[name!='newsletter']").attr("checked", true); ]]></code>
          <result><![CDATA[[ <input type="checkbox" name="accept" value="Evil Plans" checked="true" /> ] ]]></result>
        </example>
      </method>
      <method name="[attribute^=value]" type="Array&lt;Element&gt;" short="匹配给定的属性是以某些值开始的元素">
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String" optional="true">
          <desc>属性值。引号在大多数情况下是可选的。但在遇到诸如属性值包含"]"时，用以避免冲突。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有 name 以 'news' 开始的 input 元素 ]]></desc>
          <before><![CDATA[<input name="newsletter" />
<input name="milkman" />
<input name="newsboy" /> ]]></before>
          <code><![CDATA[$("input[name^='news']") ]]></code>
          <result><![CDATA[[ <input name="newsletter" />, <input name="newsboy" /> ] ]]></result>
        </example>
      </method>
      <method name="[attribute$=value]" type="Array&lt;Element&gt;" short="匹配给定的属性是以某些值结尾的元素">
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String" optional="true">
          <desc>属性值。引号在大多数情况下是可选的。但在遇到诸如属性值包含"]"时，用以避免冲突。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有 name 以 'letter' 结尾的 input 元素]]></desc>
          <before><![CDATA[<input name="newsletter" />
<input name="milkman" />
<input name="jobletter" /> ]]></before>
          <code><![CDATA[$("input[name$='letter']") ]]></code>
          <result><![CDATA[[ <input name="newsletter" />, <input name="jobletter" /> ] ]]></result>
        </example>
      </method>
      <method name="[attribute*=value]" type="Array&lt;Element&gt;" short="匹配给定的属性是以包含某些值的元素">
        <param name="attribute" type="String">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String" optional="true">
          <desc>属性值。引号在大多数情况下是可选的。但在遇到诸如属性值包含"]"时，用以避免冲突。</desc>
        </param>
        <example>
          <desc><![CDATA[查找所有 name 包含 'man' 的 input 元素]]></desc>
          <before><![CDATA[<input name="man-news" />
<input name="milkman" />
<input name="letterman2" />
<input name="newmilk" /> ]]></before>
          <code><![CDATA[$("input[name*='man']") ]]></code>
          <result><![CDATA[[ <input name="man-news" />, <input name="milkman" />, <input name="letterman2" /> ] ]]></result>
        </example>
      </method>
      <method name="[selector1][selector2][selectorN]" type="Array&lt;Element&gt;" short="复合属性选择器，需要同时满足多个条件时使用。">
        <param name="selector1" type="Selector">
          <desc>属性选择器</desc>
        </param>
        <param name="selector2" type="Selector">
          <desc>另一个属性选择器，用以进一步缩小范围</desc>
        </param>
        <param name="selectorN" type="Selector">
          <desc>任意多个属性选择器</desc>
        </param>
        <example>
          <desc><![CDATA[找到所有含有 id 属性，并且它的 name 属性是以 man 结尾的 ]]></desc>
          <before><![CDATA[<input id="man-news" name="man-news" />
<input name="milkman" />
<input id="letterman" name="new-letterman" />
<input name="newmilk" /> ]]></before>
          <code><![CDATA[$("input[id][name$='man']") ]]></code>
          <result><![CDATA[[ <input id="letterman" name="new-letterman" /> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="子元素">
      <method name=":nth-child" type="Array&lt;Element&gt;" short="匹配其父元素下的第N个子或奇偶元素">
        <desc><![CDATA[ ':eq(index)' 只匹配一个元素，而这个将为每一个父元素匹配子元素。:nth-child从1开始的，而:eq()是从0算起的！<p>可以使用:<br>nth-child(even)<br>:nth-child(odd)<br>:nth-child(3n)<br>:nth-child(2)<br>:nth-child(3n+1)<br>:nth-child(3n+2)</p>]]></desc>
        <param name="index" type="Number">
          <desc>要匹配元素的序号，从1开始</desc>
        </param>
        <example>
          <desc><![CDATA[在每个 ul 查找第 2 个li]]></desc>
          <before><![CDATA[<ul>
  <li>John</li>
  <li>Karl</li>
  <li>Brandon</li>
</ul>
<ul>
  <li>Glen</li>
  <li>Tane</li>
  <li>Ralph</li>
</ul> ]]></before>
          <code><![CDATA[$("ul li:nth-child(2)") ]]></code>
          <result><![CDATA[[ <li>Karl</li>,   <li>Tane</li> ] ]]></result>
        </example>
      </method>
      <method name=":first-child" type="Array&lt;Element&gt;" short="匹配第一个子元素">
        <desc><![CDATA[':first' 只匹配一个元素，而此选择符将为每个父元素匹配一个子元素]]></desc>
        <example>
          <desc><![CDATA[在每个 ul 中查找第一个 li ]]></desc>
          <before><![CDATA[<ul>
  <li>John</li>
  <li>Karl</li>
  <li>Brandon</li>
</ul>
<ul>
  <li>Glen</li>
  <li>Tane</li>
  <li>Ralph</li>
</ul> ]]></before>
          <code><![CDATA[$("ul li:first-child") ]]></code>
          <result><![CDATA[[ <li>John</li>, <li>Glen</li> ] ]]></result>
        </example>
      </method>
      <method name=":last-child" type="Array&lt;Element&gt;" short="匹配最后一个子元素">
        <desc><![CDATA[':last'只匹配一个元素，而此选择符将为每个父元素匹配一个子元素]]></desc>
        <example>
          <desc><![CDATA[在每个 ul 中查找最后一个 li]]></desc>
          <before><![CDATA[<ul>
  <li>John</li>
  <li>Karl</li>
  <li>Brandon</li>
</ul>
<ul>
  <li>Glen</li>
  <li>Tane</li>
  <li>Ralph</li>
</ul> ]]></before>
          <code><![CDATA[$("ul li:last-child") ]]></code>
          <result><![CDATA[[ <li>Brandon</li>, <li>Ralph</li> ] ]]></result>
        </example>
      </method>
      <method name=":only-child" type="Array&lt;Element&gt;" short="如果某个元素是父元素中唯一的子元素，那将会被匹配">
        <desc><![CDATA[如果父元素中含有其他元素，那将不会被匹配。]]></desc>
        <example>
          <desc><![CDATA[在 ul 中查找是唯一子元素的 li]]></desc>
          <before><![CDATA[<ul>
  <li>John</li>
  <li>Karl</li>
  <li>Brandon</li>
</ul>
<ul>
  <li>Glen</li>
</ul>]]></before>
          <code><![CDATA[$("ul li:only-child") ]]></code>
          <result><![CDATA[[ <li>Glen</li> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="表单">
      <method name=":input" type="Array&lt;Element&gt;" short="匹配所有 input, textarea, select 和 button 元素">
        <example>
          <desc><![CDATA[查找所有的input元素]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":input") ]]></code>
          <result><![CDATA[[ <input type="text" />, &lt;input type="checkbox" /&gt;, <input type="radio" />, <input type="image" />, &lt;input type="file" /&gt;, <input type="submit" />, <input type="reset" />, &lt;input type="password" /&gt;, <input type="button" /> ] ]]></result>
        </example>
      </method>
      <method name=":text" type="Array&lt;Element&gt;" short="匹配所有的单行文本框">
        <example>
          <desc><![CDATA[查找所有文本框]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":text") ]]></code>
          <result><![CDATA[[ <input type="text" /> ] ]]></result>
        </example>
      </method>
      <method name=":password" type="Array&lt;Element&gt;" short="匹配所有密码框">
        <example>
          <desc><![CDATA[查找所有密码框 ]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":password") ]]></code>
          <result><![CDATA[[ <input type="password" /> ] ]]></result>
        </example>
      </method>
      <method name=":radio" type="Array&lt;Element&gt;" short="匹配所有单选按钮">
        <example>
          <desc><![CDATA[查找所有单选按钮]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":radio") ]]></code>
          <result><![CDATA[[ <input type="radio" /> ]]]></result>
        </example>
      </method>
      <method name=":checkbox" type="Array&lt;Element&gt;" short="匹配所有复选框">
        <example>
          <desc><![CDATA[查找所有复选框]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":checkbox") ]]></code>
          <result><![CDATA[[ <input type="checkbox" /> ]]]></result>
        </example>
      </method>
      <method name=":submit" type="Array&lt;Element&gt;" short="匹配所有提交按钮">
        <example>
          <desc><![CDATA[查找所有提交按钮]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":submit") ]]></code>
          <result><![CDATA[[ <input type="submit" /> ]]]></result>
        </example>
      </method>
      <method name=":image" type="Array&lt;Element&gt;" short="匹配所有图像域">
        <example>
          <desc><![CDATA[匹配所有图像域]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":image") ]]></code>
          <result><![CDATA[[ <input type="image" /> ]]]></result>
        </example>
      </method>
      <method name=":reset" type="Array&lt;Element&gt;" short="匹配所有重置按钮">
        <example>
          <desc><![CDATA[查找所有重置按钮 ]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":reset") ]]></code>
          <result><![CDATA[[ <input type="reset" /> ]]]></result>
        </example>
      </method>
      <method name=":button" type="Array&lt;Element&gt;" short="匹配所有按钮">
        <example>
          <desc><![CDATA[查找所有按钮. ]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":button") ]]></code>
          <result><![CDATA[[ <input type="button" />,<button></button> ]]]></result>
        </example>
      </method>
      <method name=":file" type="Array&lt;Element&gt;" short="匹配所有文件域">
        <example>
          <desc><![CDATA[查找所有文件域]]></desc>
          <before><![CDATA[<form>
  <input type="text" />
  <input type="checkbox" />
  <input type="radio" />
  <input type="image" />
  <input type="file" />
  <input type="submit" />
  <input type="reset" />
  <input type="password" />
  <input type="button" />
  <select><option/></select>
  <textarea></textarea>
  <button></button>
</form> ]]></before>
          <code><![CDATA[$(":file") ]]></code>
          <result><![CDATA[[ <input type="file" /> ]]]></result>
        </example>
      </method>
      <method name=":hidden" type="Array&lt;Element&gt;" short="匹配所有不可见元素，或者type为hidden的元素">
        <example>
          <desc><![CDATA[查找隐藏的 tr]]></desc>
          <before><![CDATA[<table>
  <tr style="display:none"><td>Value 1</td></tr>
  <tr><td>Value 2</td></tr>
</table> ]]></before>
          <code><![CDATA[$("tr:hidden") ]]></code>
          <result><![CDATA[[ <tr style="display:none"><td>Value 1</td></tr> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[匹配type为hidden的元素]]></desc>
          <before><![CDATA[<form>
  <input type="text" name="email" />
  <input type="hidden" name="id" />
</form> ]]></before>
          <code><![CDATA[$("input:hidden") ]]></code>
          <result><![CDATA[[ <input type="hidden" name="id" /> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="表单对象属性">
      <method name=":enabled" type="Array&lt;Element&gt;" short="匹配所有可用元素">
        <example>
          <desc><![CDATA[查找所有可用的input元素 ]]></desc>
          <before><![CDATA[<form>
  <input name="email" disabled="disabled" />
  <input name="id" />
</form> ]]></before>
          <code><![CDATA[$("input:enabled") ]]></code>
          <result><![CDATA[[ <input name="id" /> ] ]]></result>
        </example>
      </method>
      <method name=":disabled" type="Array&lt;Element&gt;" short="匹配所有不可用元素">
        <example>
          <desc><![CDATA[查找所有不可用的input元素  ]]></desc>
          <before><![CDATA[<form>
  <input name="email" disabled="disabled" />
  <input name="id" />
</form> ]]></before>
          <code><![CDATA[$("input:disabled") ]]></code>
          <result><![CDATA[[ <input name="email" disabled="disabled" /> ] ]]></result>
        </example>
      </method>
      <method name=":checked" type="Array&lt;Element&gt;" short="匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)">
        <example>
          <desc><![CDATA[查找所有选中的复选框元素]]></desc>
          <before><![CDATA[<form>
  <input type="checkbox" name="newsletter" checked="checked" value="Daily" />
  <input type="checkbox" name="newsletter" value="Weekly" />
  <input type="checkbox" name="newsletter" checked="checked" value="Monthly" />
</form> ]]></before>
          <code><![CDATA[$("input:checked") ]]></code>
          <result><![CDATA[[ <input type="checkbox" name="newsletter" checked="checked" value="Daily" />, <input type="checkbox" name="newsletter" checked="checked" value="Monthly" /> ] ]]></result>
        </example>
      </method>
      <method name=":selected" type="Array&lt;Element&gt;" short="匹配所有选中的option元素">
        <example>
          <desc><![CDATA[查找所有选中的选项元素]]></desc>
          <before><![CDATA[<select>
  <option value="1">Flowers</option>
  <option value="2" selected="selected">Gardens</option>
  <option value="3">Trees</option>
</select> ]]></before>
          <code><![CDATA[$("select option:selected") ]]></code>
          <result><![CDATA[[ <option value="2" selected="selected">Gardens</option> ] ]]></result>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="属性">
    <subcat name="属性">
      <method name="attr" type="Object" short="取得第一个匹配元素的属性值。通过这个方法可以方便地从第一个匹配元素中获取一个属性的值。如果元素没有相应属性，则返回 undefined 。">
        <param name="name" type="String">
          <desc>属性名称</desc>
        </param>
        <example>
          <desc><![CDATA[返回文档中第一个图像的src属性值。]]></desc>
          <before><![CDATA[<img src="test.jpg"/> ]]></before>
          <code><![CDATA[$("img").attr("src"); ]]></code>
          <result><![CDATA[test.jpg ]]></result>
        </example>
      </method>
      <method name="attr" type="jQuery" short="将一个“名/值”形式的对象设置为所有匹配元素的属性。">
        <desc><![CDATA[这是一种在所有匹配元素中批量设置很多属性的最佳方式。 注意，如果你要设置对象的class属性，你必须使用'className' 作为属性名。或者你可以直接使用.addClass( class ) 和 .removeClass( class ).]]></desc>
        <param name="properties" type="Map">
          <desc>作为属性的“名/值对”对象</desc>
        </param>
        <example>
          <desc><![CDATA[为所有图像设置src和alt属性。]]></desc>
          <before><![CDATA[<img/> ]]></before>
          <code><![CDATA[$("img").attr({ src: "test.jpg", alt: "Test Image" });]]></code>
          <result><![CDATA[[ <img src= "test.jpg"  alt:="Test Image" /> ] ]]></result>
        </example>
      </method>
      <method name="attr" type="jQuery" short="为所有匹配的元素设置一个属性值。">
        <param name="key" type="String">
          <desc>属性名称</desc>
        </param>
        <param name="value" type="Object">
          <desc>属性值</desc>
        </param>
        <example>
          <desc><![CDATA[为所有图像设置src属性。]]></desc>
          <before><![CDATA[<img/> 
<img/> ]]></before>
          <code><![CDATA[$("img").attr("src","test.jpg"); ]]></code>
          <result><![CDATA[[ <img src= "test.jpg" /> , <img src= "test.jpg" /> ] ]]></result>
        </example>
      </method>
      <method name="attr" type="jQuery" short="为所有匹配的元素设置一个计算的属性值。">
        <desc><![CDATA[不提供值，而是提供一个函数，由这个函数计算的值作为属性值。]]></desc>
        <param name="key" type="String">
          <desc>属性名称</desc>
        </param>
        <param name="fn" type="Function">
          <desc>返回值的函数 范围:当前元素, 参数: 当前元素的索引值</desc>
        </param>
        <example>
          <desc><![CDATA[把src属性的值设置为title属性的值。]]></desc>
          <before><![CDATA[<img src="test.jpg"/> ]]></before>
          <code><![CDATA[$("img").attr("title", function() { return this.src });]]></code>
          <result><![CDATA[<img src="test.jpg" title="test.jpg" />]]></result>
        </example>
      </method>
      <method name="removeAttr" type="jQuery" short="从每一个匹配的元素中删除一个属性">
        <param name="name" type="String">
          <desc>要删除的属性名</desc>
        </param>
        <example>
          <desc><![CDATA[将文档中图像的src属性删除 ]]></desc>
          <before><![CDATA[<img src="test.jpg"/> ]]></before>
          <code><![CDATA[$("img").removeAttr("src"); ]]></code>
          <result><![CDATA[[ <img /> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="CSS 类">
      <method name="addClass" type="jQuery" short="为每个匹配的元素添加指定的类名。">
        <param name="class" type="String">
          <desc>一个或多个要添加到元素中的CSS类名，请用空格分开</desc>
        </param>
        <example>
          <desc><![CDATA[为匹配的元素加上 'selected' 类]]></desc>
          <before><![CDATA[<p>Hello</p> ]]></before>
          <code><![CDATA[$("p").addClass("selected"); ]]></code>
          <result><![CDATA[[ <p class="selected">Hello</p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[为匹配的元素加上 selected highlight 类]]></desc>
          <before><![CDATA[<p>Hello</p> ]]></before>
          <code><![CDATA[$("p").addClass("selected highlight"); ]]></code>
          <result><![CDATA[[ <p class="selected highlight">Hello</p> ] ]]></result>
        </example>
      </method>
      <method name="removeClass" type="jQuery" short="从所有匹配的元素中删除全部或者指定的类。">
        <param name="class" type="String" optional="true">
          <desc>(可选) 一个或多个要删除的CSS类名，请用空格分开</desc>
        </param>
        <example>
          <desc><![CDATA[从匹配的元素中删除 'selected' 类]]></desc>
          <before><![CDATA[<p class="selected first">Hello</p> ]]></before>
          <code><![CDATA[$("p").removeClass("selected"); ]]></code>
          <result><![CDATA[[ <p class="first">Hello</p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[删除匹配元素的所有类]]></desc>
          <before><![CDATA[<p class="selected first">Hello</p> ]]></before>
          <code><![CDATA[$("p").removeClass(); ]]></code>
          <result><![CDATA[[ <p>Hello</p> ] ]]></result>
        </example>
      </method>
      <method name="toggleClass" type="jQuery" short="如果存在（不存在）就删除（添加）一个类。">
        <param name="class" type="String">
          <desc>CSS类名</desc>
        </param>
        <example>
          <desc><![CDATA[  为匹配的元素切换 'selected' 类]]></desc>
          <before><![CDATA[<p>Hello</p><p class="selected">Hello Again</p> ]]></before>
          <code><![CDATA[$("p").toggleClass("selected"); ]]></code>
          <result><![CDATA[[ <p class="selected">Hello</p>, <p>Hello Again</p> ] ]]></result>
        </example>
      </method>
      <method name="toggleClass" type="jQuery" short="如果开关switch参数为true则加上对应的class，否则就删除。">
        <param name="class" type="String">
          <desc>要切换的CSS类名</desc>
        </param>
        <param name="switch" type="Boolean">
          <desc>用于决定是否切换class的布尔值。</desc>
        </param>
        <example>
          <desc><![CDATA[  每点击三下加上一次 'selected' 类]]></desc>
          <before><![CDATA[<strong>jQuery 代码:</strong>]]></before>
          <code><![CDATA[  var count = 0;
  $("p").click(function(){
      $(this).toggleClass("highlight", count++ % 3 == 0);
  });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="HTML代码">
      <method name="html" type="String" short="取得第一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。"/>
      <method name="html" type="jQuery" short="设置每一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。">
        <param name="val" type="String">
          <desc>用于设定HTML内容的值</desc>
        </param>
      </method>
    </subcat>
    <subcat name="文本">
      <method name="text" type="String" short="取得所有匹配元素的内容。">
        <desc><![CDATA[结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效。]]></desc>
      </method>
      <method name="text" type="jQuery" short="设置所有匹配元素的文本内容">
        <desc><![CDATA[与 html() 类似, 但将编码 HTML (将 "<" 和">" 替换成相应的HTML实体).]]></desc>
        <param name="val" type="String">
          <desc>用于设置元素内容的文本</desc>
        </param>
      </method>
    </subcat>
    <subcat name="值">
      <method name="val" type="String,Array" short="获得第一个匹配元素的当前值。">
        <desc><![CDATA[在 jQuery 1.2 中,可以返回任意元素的值了。包括select。如果多选，将返回一个数组，其包含所选的值。]]></desc>
        <example>
          <desc><![CDATA[获得单个select的值和多选select的值。]]></desc>
          <before><![CDATA[<p></p><br/>
<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>
<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select> ]]></before>
          <code><![CDATA[$("p").append(
  "<b>Single:</b> "   + $("#single").val() +
  " <b>Multiple:</b> " + $("#multiple").val().join(", ")
); ]]></code>
          <result><![CDATA[[ <p><b>Single:</b>Single<b>Multiple:</b>Multiple, Multiple3</p>] ]]></result>
        </example>
        <example>
          <desc><![CDATA[获取文本框中的值 ]]></desc>
          <before><![CDATA[<input type="text" value="some text"/>]]></before>
          <code><![CDATA[$("input").val();]]></code>
          <result><![CDATA[some text ]]></result>
        </example>
      </method>
      <method name="val" type="jQuery" short="设置每一个匹配元素的值。">
        <desc><![CDATA[在 jQuery 1.2, 这也可以为select元件赋值]]></desc>
        <param name="val" type="String">
          <desc>要设置的值。</desc>
        </param>
        <example>
          <desc><![CDATA[设定文本框的值 ]]></desc>
          <before><![CDATA[<input type="text"/> ]]></before>
          <code><![CDATA[$("input").val("hello world!"); ]]></code>
        </example>
      </method>
      <method name="val" type="jQuery" short="">
        <param name="val" type="Array&lt;String&gt;">
          <desc>用于 check/select 的值</desc>
        </param>
        <example>
          <desc><![CDATA[设定一个select和一个多选的select的值]]></desc>
          <before><![CDATA[<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>
<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select><br/>
<input type="checkbox" value="check1"/> check1
<input type="checkbox" value="check2"/> check2
<input type="radio" value="radio1"/> radio1
<input type="radio" value="radio2"/> radio2 ]]></before>
          <code><![CDATA[$("#single").val("Single2");
$("#multiple").val(["Multiple2", "Multiple3"]);
$("input").val(["check2", "radio1"]);]]></code>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="筛选">
    <subcat name="过滤">
      <method name="eq" type="jQuery" short="获取第N个元素">
        <desc><![CDATA[这个元素的位置是从0算起。]]></desc>
        <param name="index" type="Integer">
          <desc>元素在jQuery对象中的索引</desc>
        </param>
        <example>
          <desc><![CDATA[获取匹配的第二个元素]]></desc>
          <before><![CDATA[<p> This is just a test.</p> <p> So is this</p> ]]></before>
          <code><![CDATA[$("p").eq(1)]]></code>
          <result><![CDATA[[ <p> So is this</p> ]]]></result>
        </example>
      </method>
      <method name="hasClass" type="Boolean" short="检查当前的元素是否含有某个特定的类，如果有，则返回true。">
        <desc><![CDATA[这其实就是 is("." + class)。]]></desc>
        <param name="class" type="String">
          <desc>用于匹配的类名</desc>
        </param>
        <example>
          <desc><![CDATA[给包含有某个类的元素进行一个动画。]]></desc>
          <before><![CDATA[<div class="protected"></div><div></div> ]]></before>
          <code><![CDATA[$("div").click(function(){
  if ( $(this).hasClass("protected") )
    $(this)
      .animate({ left: -10 })
      .animate({ left: 10 })
      .animate({ left: -10 })
      .animate({ left: 10 })
      .animate({ left: 0 });
});]]></code>
        </example>
      </method>
      <method name="filter" type="jQuery" short="筛选出与指定表达式匹配的元素集合。">
        <desc><![CDATA[这个方法用于缩小匹配的范围。用逗号分隔多个表达式]]></desc>
        <param name="expr" type="Expression">
          <desc>表达式</desc>
        </param>
        <example>
          <desc><![CDATA[保留带有select类的元素 ]]></desc>
          <before><![CDATA[<p>Hello</p><p>Hello Again</p><p class="selected">And Again</p> ]]></before>
          <code><![CDATA[$("p").filter(".selected") ]]></code>
          <result><![CDATA[[ <p class="selected">And Again</p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[保留第一个以及带有select类的元素 ]]></desc>
          <before><![CDATA[<p>Hello</p><p>Hello Again</p><p class="selected">And Again</p> ]]></before>
          <code><![CDATA[$("p").filter(".selected, :first") ]]></code>
          <result><![CDATA[[ <p>Hello</p>, <p class="selected">And Again</p> ] ]]></result>
        </example>
      </method>
      <method name="filter" type="jQuery" short="筛选出与指定函数返回值匹配的元素集合">
        <desc><![CDATA[这个函数内部将对每个对象计算一次 (正如 '$.each'). 如果调用的函数返回false则这个元素被删除，否则就会保留。]]></desc>
        <param name="fn" type="Function">
          <desc>传递进filter的函数</desc>
        </param>
        <example>
          <desc><![CDATA[保留子元素中不含有ol的元素。]]></desc>
          <before><![CDATA[<p><ol><li>Hello</li></ol></p><p>How are you?</p> ]]></before>
          <code><![CDATA[$("p").filter(function(index) {
  return $("ol", this).length == 0;
});]]></code>
          <result><![CDATA[[ <p>How are you?</p> ] ]]></result>
        </example>
      </method>
      <method name="is" type="Boolean" short="用一个表达式来检查当前选择的元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。">
        <desc><![CDATA[如果没有元素符合，或者表达式无效，都返回'false'。 <strong>注意：</strong>在jQuery 1.3中对所有表达式提供了支持。先前版本中如果提供了复杂的表达式，比如层级选择器（比如 + , ~ 和 > ）始终会返回true]]></desc>
        <param name="expr" type="String">
          <desc>用于筛选的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[由于input元素的父元素是一个表单元素，所以返回true。]]></desc>
          <before><![CDATA[<form><input type="checkbox" /></form> ]]></before>
          <code><![CDATA[$("input[type='checkbox']").parent().is("form") ]]></code>
          <result><![CDATA[true ]]></result>
        </example>
      </method>
      <method name="map" type="jQuery" short="将一组元素转换成其他数组（不论是否是元素数组）">
        <desc><![CDATA[你可以用这个函数来建立一个列表，不论是值、属性还是CSS样式，或者其他特别形式。这都可以用'$.map()'来方便的建立。]]></desc>
        <param name="callback" type="Function">
          <desc>给每个元素执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[把form中的每个input元素的值建立一个列表。]]></desc>
          <before><![CDATA[<p><b>Values: </b></p>
<form>
  <input type="text" name="name" value="John"/>
  <input type="text" name="password" value="password"/>
  <input type="text" name="url" value="http://ejohn.org/"/>
</form> ]]></before>
          <code><![CDATA[$("p").append( $("input").map(function(){
  return $(this).val();
}).get().join(", ") ); ]]></code>
          <result><![CDATA[[ <p>John, password, http://ejohn.org/</p> ] ]]></result>
        </example>
      </method>
      <method name="not" type="jQuery" short="删除与指定表达式匹配的元素">
        <param name="expr" type="String, DOMElement, Array&lt;DOMElement&gt;">
          <desc>一个表达式、一个元素或者一组元素</desc>
        </param>
        <example>
          <desc><![CDATA[从p元素中删除带有 select 的ID的元素]]></desc>
          <before><![CDATA[<p>Hello</p><p id="selected">Hello Again</p> ]]></before>
          <code><![CDATA[$("p").not( $("#selected")[0] ) ]]></code>
          <result><![CDATA[[ <p>Hello</p> ] ]]></result>
        </example>
      </method>
      <method name="slice" type="jQuery" short="选取一个匹配的子集">
        <desc><![CDATA[与原来的slice方法类似]]></desc>
        <param name="start" type="Integer">
          <desc>开始选取子集的位置。第一个元素是0.如果是负数，则可以从集合的尾部开始选起。</desc>
        </param>
        <param name="end" type="Integer" optional="true">
          <desc>(可选) 结束选取自己的位置，如果不指定，则就是本身的结尾。</desc>
        </param>
        <example>
          <desc><![CDATA[选择第一个p元素]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").slice(0, 1).wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[[ <p><b>Hello</b></p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[选择前两个p元素]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p>]]></before>
          <code><![CDATA[$("p").slice(0, 2).wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[[ <p><b>Hello</b></p>,<p><b>cruel</b></p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[只选取第二个p元素]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p>]]></before>
          <code><![CDATA[$("p").slice(1, 2).wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[[ <p><b>cruel</b></p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[只选取第二第三个p元素]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p>]]></before>
          <code><![CDATA[$("p").slice(1).wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[[ <p><b>cruel</b></p>, <p><b>World</b></p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[选取第最后一个p元素 ]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p>]]></before>
          <code><![CDATA[$("p").slice(-1).wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[[ <p><b>World</b></p> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="查找">
      <method name="add" type="jQuery" short="把与表达式匹配的元素添加到jQuery对象中。这个函数可以用于连接分别与两个表达式匹配的元素结果集。">
        <param name="expr" type="String, DOMElement, Array&lt;DOMElement&gt;">
          <desc>用于匹配元素并添加的表达式字符串，或者用于动态生成的HTML代码，如果是一个字符串数组则返回多个元素</desc>
        </param>
        <example>
          <desc><![CDATA[添加一个新元素到一组匹配的元素中，并且这个新元素能匹配给定的表达式。]]></desc>
          <before><![CDATA[<p>Hello</p><span>Hello Again</span> ]]></before>
          <code><![CDATA[$("p").add("span") ]]></code>
          <result><![CDATA[[ <p>Hello</p>, <span>Hello Again</span> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[动态生成一个元素并添加至匹配的元素中]]></desc>
          <before><![CDATA[<p>Hello</p> ]]></before>
          <code><![CDATA[$("p").add("<span>Again</span>") ]]></code>
          <result><![CDATA[[ <p>Hello</p>, <span>Hello Again</span> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[为匹配的元素添加一个或者多个元素]]></desc>
          <before><![CDATA[<p>Hello</p><p><span id="a">Hello Again</span></p> ]]></before>
          <code><![CDATA[$("p").add(document.getElementById("a")) ]]></code>
          <result><![CDATA[[ <p>Hello</p>, <p><span id="a">Hello Again</span></p>, <span id="a">Hello Again</span> ] ]]></result>
        </example>
      </method>
      <method name="children" type="jQuery" short="取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。">
        <desc><![CDATA[可以通过可选的表达式来过滤所匹配的子元素。注意：parents()将查找所有祖辈元素，而children()只考虑子元素而不考虑所有后代元素。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用以过滤子元素的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[查找DIV中的每个子元素。]]></desc>
          <before><![CDATA[<p>Hello</p><div><span>Hello Again</span></div><p>And Again</p> ]]></before>
          <code><![CDATA[$("div").children() ]]></code>
          <result><![CDATA[[ <span>Hello Again</span> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[在每个div中查找 .selected 的类。]]></desc>
          <before><![CDATA[<div><span>Hello</span><p class="selected">Hello Again</p><p>And Again</p></div> ]]></before>
          <code><![CDATA[$("div").children(".selected") ]]></code>
          <result><![CDATA[[ <p class="selected">Hello Again</p> ] ]]></result>
        </example>
      </method>
      <method name="closest" type="jQuery" short="jQuery 1.3新增。从元素本身开始，逐级向上级元素匹配，并返回最先匹配的元素。">
        <desc><![CDATA[<p>closest会首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素。如果什么都没找到则返回一个空的jQuery对象。</p><p>closest对于处理事件委派非常有用。</p>]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用以过滤元素的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[展示如何使用clostest来完成事件委派。]]></desc>
          <before><![CDATA[<ul>
    <li><b>Click me!</b></li>
    <li>You can also <b>Click me!</b></li>
</ul>]]></before>
          <code><![CDATA[$(document).bind("click", function (e) {
    $(e.target).closest("li").toggleClass("hilight");
}); ]]></code>
        </example>
      </method>
      <method name="contents" type="jQuery" short="查找匹配元素内部所有的子节点（包括文本节点）。如果元素是一个iframe，则查找文档内容">
        <example>
          <desc><![CDATA[查找所有文本节点并加粗]]></desc>
          <before><![CDATA[<p>Hello <a href="http://ejohn.org/">John</a>, how are you doing?</p> ]]></before>
          <code><![CDATA[$("p").contents().not("[nodeType=1]").wrap("<b/>"); ]]></code>
          <result><![CDATA[<p><b>Hello</b> <a href="http://ejohn.org/">John</a>, <b>how are you doing?</b></p> ]]></result>
        </example>
        <example>
          <desc><![CDATA[往一个空框架中加些内容]]></desc>
          <before><![CDATA[<iframe src="/index-blank.html" width="300" height="100"></iframe> ]]></before>
          <code><![CDATA[$("iframe").contents().find("body")
  .append("I'm in an iframe!"); ]]></code>
        </example>
      </method>
      <method name="find" type="jQuery" short="搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。">
        <desc><![CDATA[所有搜索都依靠jQuery表达式来完成。这个表达式可以使用CSS1-3的选择器语法来写。]]></desc>
        <param name="expr" type="String">
          <desc>用于查找的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[从所有的段落开始，进一步搜索下面的span元素。与$("p span")相同。]]></desc>
          <before><![CDATA[<p><span>Hello</span>, how are you?</p> ]]></before>
          <code><![CDATA[$("p").find("span") ]]></code>
          <result><![CDATA[[ <span>Hello</span> ] ]]></result>
        </example>
      </method>
      <method name="next" type="jQuery" short="取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。">
        <desc><![CDATA[这个函数只返回后面那个紧邻的同辈元素，而不是后面所有的同辈元素（可以使用nextAll）。可以用一个可选的表达式进行筛选。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于筛选的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[找到每个段落的后面紧邻的同辈元素。]]></desc>
          <before><![CDATA[<p>Hello</p><p>Hello Again</p><div><span>And Again</span></div> ]]></before>
          <code><![CDATA[$("p").next() ]]></code>
          <result><![CDATA[[ <p>Hello Again</p>, <div><span>And Again</span></div> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[找到每个段落的后面紧邻的同辈元素中类名为selected的元素。]]></desc>
          <before><![CDATA[<p>Hello</p><p class="selected">Hello Again</p><div><span>And Again</span></div> ]]></before>
          <code><![CDATA[$("p").next(".selected") ]]></code>
          <result><![CDATA[[ <p class="selected">Hello Again</p> ] ]]></result>
        </example>
      </method>
      <method name="nextAll" type="jQuery" short="查找当前元素之后所有的同辈元素。">
        <desc><![CDATA[可以用表达式过滤]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选)用来过滤的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[给第一个div之后的所有元素加个类]]></desc>
          <before><![CDATA[<div></div><div></div><div></div><div></div> ]]></before>
          <code><![CDATA[$("div:first").nextAll().addClass("after"); ]]></code>
          <result><![CDATA[[ <div class="after"></div>, <div class="after"></div>, <div class="after"></div> ] ]]></result>
        </example>
      </method>
      <method name="offsetParent" type="jQuery" short="返回第一个匹配元素用于定位的父节点。">
        <desc><![CDATA[这返回父元素中第一个其position设为relative或者absolute的元素。此方法仅对可见元素有效。]]></desc>
      </method>
      <method name="parent" type="jQuery" short="取得一个包含着所有匹配元素的唯一父元素的元素集合。">
        <desc><![CDATA[你可以使用可选的表达式来筛选。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选)用来筛选的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[查找每个段落的父元素]]></desc>
          <before><![CDATA[<div><p>Hello</p><p>Hello</p></div> ]]></before>
          <code><![CDATA[$("p").parent() ]]></code>
          <result><![CDATA[[ <div><p>Hello</p><p>Hello</p></div>] ]]></result>
        </example>
        <example>
          <desc><![CDATA[查找段落的父元素中每个类名为selected的父元素。]]></desc>
          <before><![CDATA[<div><p>Hello</p></div><div class="selected"><p>Hello Again</p></div> ]]></before>
          <code><![CDATA[$("p").parent(".selected") ]]></code>
          <result><![CDATA[[ <div class="selected"><p>Hello Again</p></div> ] ]]></result>
        </example>
      </method>
      <method name="parents" type="jQuery" short="取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选。">
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于筛选祖先元素的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[找到每个span元素的所有祖先元素。]]></desc>
          <before><![CDATA[<html><body><div><p><span>Hello</span></p><span>Hello Again</span></div></body></html> ]]></before>
          <code><![CDATA[$("span").parents() ]]></code>
        </example>
        <example>
          <desc><![CDATA[找到每个span的所有是p元素的祖先元素。]]></desc>
          <code><![CDATA[$("span").parents("p") ]]></code>
        </example>
      </method>
      <method name="prev" type="jQuery" short="取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。">
        <desc><![CDATA[可以用一个可选的表达式进行筛选。只有紧邻的同辈元素会被匹配到，而不是前面所有的同辈元素。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于筛选前一个同辈元素的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[找到每个段落紧邻的前一个同辈元素。]]></desc>
          <before><![CDATA[<p>Hello</p><div><span>Hello Again</span></div><p>And Again</p> ]]></before>
          <code><![CDATA[$("p").prev() ]]></code>
          <result><![CDATA[[ <div><span>Hello Again</span></div> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[找到每个段落紧邻的前一个同辈元素中类名为selected的元素。]]></desc>
          <before><![CDATA[<div><span>Hello</span></div><p class="selected">Hello Again</p><p>And Again</p> ]]></before>
          <code><![CDATA[$("p").prev(".selected") ]]></code>
          <result><![CDATA[[ <p class="selected">Hello Again</p> ] ]]></result>
        </example>
      </method>
      <method name="prevAll" type="jQuery" short="查找当前元素之前所有的同辈元素">
        <desc><![CDATA[可以用表达式过滤。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于过滤的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[给最后一个之前的所有div加上一个类]]></desc>
          <before><![CDATA[<div></div><div></div><div></div><div></div> ]]></before>
          <code><![CDATA[$("div:last").prevAll().addClass("before"); ]]></code>
          <result><![CDATA[[ <div class="before"></div>, <div class="before"></div>, <div class="before"></div> ] ]]></result>
        </example>
      </method>
      <method name="siblings" type="jQuery" short="取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。可以用可选的表达式进行筛选。">
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于筛选同辈元素的表达式</desc>
        </param>
        <example>
          <desc><![CDATA[找到每个div的所有同辈元素。]]></desc>
          <before><![CDATA[<p>Hello</p><div><span>Hello Again</span></div><p>And Again</p> ]]></before>
          <code><![CDATA[$("div").siblings() ]]></code>
          <result><![CDATA[[ <p>Hello</p>, <p>And Again</p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[找到每个div的所有同辈元素中带有类名为selected的元素。]]></desc>
          <before><![CDATA[<div><span>Hello</span></div><p class="selected">Hello Again</p><p>And Again</p> ]]></before>
          <code><![CDATA[$("div").siblings(".selected") ]]></code>
          <result><![CDATA[[ <p class="selected">Hello Again</p> ] ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="串联">
      <method name="andSelf" type="jQuery" short="加入先前所选的加入当前元素中">
        <desc><![CDATA[对于筛选或查找后的元素，要加入先前所选元素时将会很有用。]]></desc>
        <example>
          <desc><![CDATA[选取所有div以及内部的p，并加上border类]]></desc>
          <before><![CDATA[<div><p>First Paragraph</p><p>Second Paragraph</p></div> ]]></before>
          <code><![CDATA[$("div").find("p").andSelf().addClass("border"); ]]></code>
          <result><![CDATA[<div class="border"><p class="border">First Paragraph</p><p class="border">Second Paragraph</p></div> ]]></result>
        </example>
      </method>
      <method name="end" type="jQuery" short="回到最近的一个&quot;破坏性&quot;操作之前。即，将匹配的元素列表变为前一次的状态。">
        <desc><![CDATA[如果之前没有破坏性操作，则返回一个空集。所谓的"破坏性"就是指任何改变所匹配的jQuery元素的操作。这包括在 Traversing 中任何返回一个jQuery对象的函数--'add', 'andSelf', 'children', 'filter', 'find', 'map', 'next', 'nextAll', 'not', 'parent', 'parents', 'prev', 'prevAll', 'siblings' and 'slice'--再加上 Manipulation 中的 'clone'。]]></desc>
        <example>
          <desc><![CDATA[选取所有的p元素，查找并选取span子元素，然后再回过来选取p元素]]></desc>
          <before><![CDATA[<p><span>Hello</span>,how are you?</p> ]]></before>
          <code><![CDATA[$("p").find("span").end() ]]></code>
          <result><![CDATA[[ <p><span>Hello</span> how are you?</p> ] ]]></result>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="文档处理">
    <subcat name="内部插入">
      <method name="append" type="jQuery" short="向每个匹配的元素内部追加内容。">
        <desc><![CDATA[这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。]]></desc>
        <param name="content" type="String, Element, jQuery">
          <desc>要追加到目标中的内容</desc>
        </param>
        <example>
          <desc><![CDATA[向所有段落中追加一些HTML标记。]]></desc>
          <before><![CDATA[<p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").append("<b>Hello</b>"); ]]></code>
          <result><![CDATA[[ <p>I would like to say: <b>Hello</b></p> ] ]]></result>
        </example>
      </method>
      <method name="appendTo" type="jQuery" short="把所有匹配的元素追加到另一个、指定的元素元素集合中。">
        <desc><![CDATA[实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。]]></desc>
        <param name="content" type="String">
          <desc>用于被追加的内容</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落追加到ID值为foo的元素中。]]></desc>
          <before><![CDATA[<p>I would like to say: </p><div id="foo"></div> ]]></before>
          <code><![CDATA[$("p").appendTo("#foo"); ]]></code>
          <result><![CDATA[<div id="foo"><p>I would like to say: </p></div> ]]></result>
        </example>
      </method>
      <method name="prepend" type="jQuery" short="向每个匹配的元素内部前置内容。">
        <desc><![CDATA[这是向所有匹配元素内部的开始处插入内容的最佳方式。]]></desc>
        <param name="content" type="String, Element, jQuery">
          <desc>要插入到目标元素内部前端的内容</desc>
        </param>
        <example>
          <desc><![CDATA[向所有段落中前置一些HTML标记代码。]]></desc>
          <before><![CDATA[<p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").prepend("<b>Hello</b>"); ]]></code>
          <result><![CDATA[[ <p><b>Hello</b>I would like to say: </p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[将一个DOM元素前置入所有段落]]></desc>
          <before><![CDATA[<p>I would like to say: </p>
<p>I would like to say: </p>
<b class="foo">Hello</b>
<b class="foo">Good Bye</b> ]]></before>
          <code><![CDATA[$("p").prepend( $(".foo")[0] ); ]]></code>
          <result><![CDATA[<p><b class="foo">Hello</b>I would like to say: </p>
<p><b class="foo">Hello</b>I would like to say: </p>
<b class="foo">Hello</b>
<b class="foo">Good Bye</b> ]]></result>
        </example>
        <example>
          <desc><![CDATA[向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。]]></desc>
          <before><![CDATA[<p>I would like to say: </p><b>Hello</b> ]]></before>
          <code><![CDATA[$("p").prepend( $("b") ); ]]></code>
          <result><![CDATA[<p><b>Hello</b>I would like to say: </p> ]]></result>
        </example>
      </method>
      <method name="prependTo" type="jQuery" short="把所有匹配的元素前置到另一个、指定的元素元素集合中。">
        <desc><![CDATA[实际上，使用这个方法是颠倒了常规的$(A).prepend(B)的操作，即不是把B前置到A中，而是把A前置到B中。]]></desc>
        <param name="content" type="String">
          <desc>用于匹配元素的jQuery表达式</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落追加到ID值为foo的元素中。]]></desc>
          <before><![CDATA[<p>I would like to say: </p><div id="foo"></div> ]]></before>
          <code><![CDATA[$("p").prependTo("#foo"); ]]></code>
          <result><![CDATA[<div id="foo"><p>I would like to say: </p></div> ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="外部插入">
      <method name="after" type="jQuery" short="在每个匹配的元素之后插入内容。">
        <param name="content" type="String, Element, jQuery">
          <desc>插入到每个目标后的内容</desc>
        </param>
        <example>
          <desc><![CDATA[在所有段落之后插入一些HTML标记代码。]]></desc>
          <before><![CDATA[<p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").after("<b>Hello</b>"); ]]></code>
          <result><![CDATA[<p>I would like to say: </p><b>Hello</b> ]]></result>
        </example>
        <example>
          <desc><![CDATA[在所有段落之后插入一个DOM元素。]]></desc>
          <before><![CDATA[<b id="foo">Hello</b><p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").after( $("#foo")[0] ); ]]></code>
          <result><![CDATA[<p>I would like to say: </p><b id="foo">Hello</b> ]]></result>
        </example>
        <example>
          <desc><![CDATA[在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。]]></desc>
          <before><![CDATA[<b>Hello</b><p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").after( $("b") ); ]]></code>
          <result><![CDATA[<p>I would like to say: </p><b>Hello</b> ]]></result>
        </example>
      </method>
      <method name="before" type="jQuery" short="在每个匹配的元素之前插入内容。">
        <param name="content" type="String, Element, jQuery">
          <desc>插入到每个目标前的内容</desc>
        </param>
        <example>
          <desc><![CDATA[在所有段落之前插入一些HTML标记代码。]]></desc>
          <before><![CDATA[<p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").before("<b>Hello</b>"); ]]></code>
          <result><![CDATA[[ <b>Hello</b><p>I would like to say: </p> ] ]]></result>
        </example>
        <example>
          <desc><![CDATA[在所有段落之前插入一个元素。]]></desc>
          <before><![CDATA[<p>I would like to say: </p><b id="foo">Hello</b> ]]></before>
          <code><![CDATA[$("p").before( $("#foo")[0] ); ]]></code>
          <result><![CDATA[<b id="foo">Hello</b><p>I would like to say: </p> ]]></result>
        </example>
        <example>
          <desc><![CDATA[在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。]]></desc>
          <before><![CDATA[<p>I would like to say: </p><b>Hello</b> ]]></before>
          <code><![CDATA[$("p").before( $("b") ); ]]></code>
          <result><![CDATA[<b>Hello</b><p>I would like to say: </p> ]]></result>
        </example>
      </method>
      <method name="insertAfter" type="jQuery" short="把所有匹配的元素插入到另一个、指定的元素元素集合的后面。">
        <desc><![CDATA[实际上，使用这个方法是颠倒了常规的$(A).after(B)的操作，即不是把B插入到A后面，而是把A插入到B后面。]]></desc>
        <param name="content" type="String">
          <desc>用于匹配元素的jQuery表达式</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落插入到一个元素之后。与 $("#foo").after("p")相同]]></desc>
          <before><![CDATA[<p>I would like to say: </p><div id="foo">Hello</div> ]]></before>
          <code><![CDATA[$("p").insertAfter("#foo"); ]]></code>
          <result><![CDATA[<div id="foo">Hello</div><p>I would like to say: </p> ]]></result>
        </example>
      </method>
      <method name="insertBefore" type="jQuery" short="把所有匹配的元素插入到另一个、指定的元素元素集合的前面。">
        <desc><![CDATA[实际上，使用这个方法是颠倒了常规的$(A).before(B)的操作，即不是把B插入到A前面，而是把A插入到B前面。]]></desc>
        <param name="content" type="String">
          <desc>用于匹配元素的jQuery表达式</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落插入到一个元素之前。与 $("#foo").before("p")相同。]]></desc>
          <before><![CDATA[<div id="foo">Hello</div><p>I would like to say: </p> ]]></before>
          <code><![CDATA[$("p").insertBefore("#foo"); ]]></code>
          <result><![CDATA[<p>I would like to say: </p><div id="foo">Hello</div> ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="包裹">
      <method name="wrap" type="jQuery" short="把所有匹配的元素用其他元素的结构化标记包裹起来。">
        <desc><![CDATA[这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。<p>这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包裹元素。</p>当HTML标记代码中的元素包含文本时无法使用这个函数。因此，如果要添加文本应该在包裹完成之后再行添加。]]></desc>
        <param name="html" type="String">
          <desc>HTML标记代码字符串，用于动态生成元素并包裹目标元素</desc>
        </param>
        <example>
          <desc><![CDATA[把所有的段落用一个新创建的div包裹起来]]></desc>
          <before><![CDATA[<p>Test Paragraph.</p> ]]></before>
          <code><![CDATA[$("p").wrap("<div class='wrap'></div>"); ]]></code>
          <result><![CDATA[<div class="wrap"><p>Test Paragraph.</p></div> ]]></result>
        </example>
      </method>
      <method name="wrap" type="jQuery" short="把所有匹配的元素用其他元素的结构化标记包装起来。">
        <param name="elem" type="Element">
          <desc>用于包装目标元素的DOM元素</desc>
        </param>
        <example>
          <desc><![CDATA[用ID是"content"的div将每一个段落包裹起来 ]]></desc>
          <before><![CDATA[<p>Test Paragraph.</p><div id="content"></div> ]]></before>
          <code><![CDATA[$("p").wrap(document.getElementById('content')); ]]></code>
          <result><![CDATA[<div id="content"><p>Test Paragraph.</p></div><div id="content"></div> ]]></result>
        </example>
      </method>
      <method name="wrapAll" type="jQuery" short="将所有匹配的元素用单个元素包裹起来">
        <desc><![CDATA[这于 '.wrap()'<a href="http://docs.jquery.com/Manipulation/wrap" title="Manipulation/wrap"></a> 是不同的，'.wrap()'为每一个匹配的元素都包裹一次。<p>这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。</p>这个函数的原理是检查提供的第一个元素并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。]]></desc>
        <param name="html" type="String">
          <desc>TML标记代码字符串，用于动态生成元素并包装目标元素</desc>
        </param>
        <example>
          <desc><![CDATA[用一个生成的div将所有段落包裹起来]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").wrapAll("<div></div>"); ]]></code>
          <result><![CDATA[<div><p>Hello</p><p>cruel</p><p>World</p></div> ]]></result>
        </example>
      </method>
      <method name="wrapAll" type="jQuery" short="将所有匹配的元素用单个元素包裹起来">
        <desc><![CDATA[这于 '.wrap()'<a href="http://docs.jquery.com/Manipulation/wrap" title="Manipulation/wrap"></a> 是不同的，'.wrap()'为每一个匹配的元素都包裹一次。]]></desc>
        <param name="elem" type="Element">
          <desc>用于包装目标元素的DOM元素</desc>
        </param>
        <example>
          <desc><![CDATA[用一个生成的div将所有段落包裹起来]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").wrapAll(document.createElement("div")); ]]></code>
          <result><![CDATA[<div><p>Hello</p><p>cruel</p><p>World</p></div> ]]></result>
        </example>
      </method>
      <method name="wrapInner" type="jQuery" short="将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来">
        <desc><![CDATA[这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。]]></desc>
        <param name="html" type="String">
          <desc>HTML标记代码字符串，用于动态生成元素并包装目标元素</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落内的每个子内容加粗]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").wrapInner("<b></b>"); ]]></code>
          <result><![CDATA[<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p> ]]></result>
        </example>
      </method>
      <method name="wrapInner" type="jQuery" short="将每一个匹配的元素的子内容(包括文本节点)用DOM元素包裹起来">
        <param name="elem" type="Element">
          <desc>用于包装目标元素的DOM元素</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落内的每个子内容加粗 ]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").wrapInner(document.createElement("b")); ]]></code>
          <result><![CDATA[<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p> ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="替换">
      <method name="replaceWith" type="jQuery" short="将所有匹配的元素替换成指定的HTML或DOM元素。">
        <param name="content" type="String, Element, jQuery">
          <desc>用于将匹配元素替换掉的内容</desc>
        </param>
        <example>
          <desc><![CDATA[把所有的段落标记替换成加粗的标记。]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("p").replaceWith("<b>Paragraph. </b>"); ]]></code>
          <result><![CDATA[<b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b> ]]></result>
        </example>
      </method>
      <method name="replaceAll" type="jQuery" short="用匹配的元素替换掉所有 selector匹配到的元素。">
        <param name="selector" type="选择器">
          <desc>用于查找所要被替换的元素</desc>
        </param>
        <example>
          <desc><![CDATA[把所有的段落标记替换成加粗标记]]></desc>
          <before><![CDATA[<p>Hello</p><p>cruel</p><p>World</p> ]]></before>
          <code><![CDATA[$("<b>Paragraph. </b>").replaceAll("p"); ]]></code>
          <result><![CDATA[<b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b> ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="删除">
      <method name="empty" type="jQuery" short="删除匹配的元素集合中所有的子节点。">
        <example>
          <desc><![CDATA[把所有段落的子元素（包括文本节点）删除]]></desc>
          <before><![CDATA[<p>Hello, <span>Person</span> <a href="#">and person</a></p> ]]></before>
          <code><![CDATA[$("p").empty(); ]]></code>
          <result><![CDATA[<p></p> ]]></result>
        </example>
      </method>
      <method name="remove" type="jQuery" short="从DOM中删除所有匹配的元素。">
        <desc><![CDATA[这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。]]></desc>
        <param name="expr" type="String" optional="true">
          <desc>(可选) 用于筛选元素的jQuery表达式</desc>
        </param>
        <example>
          <desc><![CDATA[从DOM中把所有段落删除]]></desc>
          <before><![CDATA[<p>Hello</p> how are <p>you?</p> ]]></before>
          <code><![CDATA[$("p").remove(); ]]></code>
          <result><![CDATA[how are ]]></result>
        </example>
        <example>
          <desc><![CDATA[从DOM中把带有hello类的段落删除]]></desc>
          <before><![CDATA[<p class="hello">Hello</p> how are <p>you?</p> ]]></before>
          <code><![CDATA[$("p").remove(".hello"); ]]></code>
          <result><![CDATA[how are <p>you?</p> ]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="复制">
      <method name="clone" type="jQuery" short="克隆匹配的DOM元素并且选中这些克隆的副本。">
        <desc><![CDATA[在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。]]></desc>
        <example>
          <desc><![CDATA[克隆所有b元素（并选中这些克隆的副本），然后将它们前置到所有段落中。]]></desc>
          <before><![CDATA[<b>Hello</b><p>, how are you?</p> ]]></before>
          <code><![CDATA[$("b").clone().prependTo("p"); ]]></code>
          <result><![CDATA[<b>Hello</b><p><b>Hello</b>, how are you?</p> ]]></result>
        </example>
      </method>
      <method name="clone" type="jQuery" short="元素以及其所有的事件处理并且选中这些克隆的副本">
        <desc><![CDATA[在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。]]></desc>
        <param name="true" type="Boolean">
          <desc>设置为true以便复制元素的所有事件处理</desc>
        </param>
        <example>
          <desc><![CDATA[创建一个按钮，他可以复制自己，并且他的副本也有同样功能。]]></desc>
          <before><![CDATA[<button>Clone Me!</button> ]]></before>
          <code><![CDATA[$("button").click(function(){
  $(this).clone(true).insertAfter(this);
});]]></code>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="CSS">
    <subcat name="CSS">
      <method name="css" type="String" short="访问第一个匹配元素的样式属性。">
        <param name="name" type="String">
          <desc>要访问的属性名称</desc>
        </param>
        <example>
          <desc><![CDATA[取得第一个段落的color样式属性的值。]]></desc>
          <code><![CDATA[$("p").css("color"); ]]></code>
        </example>
      </method>
      <method name="css" type="jQuery" short="把一个“名/值对”对象设置为所有匹配元素的样式属性。">
        <desc><![CDATA[这是一种在所有匹配的元素上设置大量样式属性的最佳方式。]]></desc>
        <param name="properties" type="Map">
          <desc>要设置为样式属性的名/值对</desc>
        </param>
        <example>
          <desc><![CDATA[将所有段落的字体颜色设为红色并且背景为蓝色。]]></desc>
          <code><![CDATA[$("p").css({ color: "#ff0011", background: "blue" });]]></code>
        </example>
        <example>
          <desc><![CDATA[如果属性名包含 "-"的话，必须使用引号: ]]></desc>
          <code><![CDATA[$("p").css({ "margin-left": "10px", "background-color": "blue" });]]></code>
        </example>
      </method>
      <method name="css" type="jQuery" short="在所有匹配的元素中，设置一个样式属性的值。">
        <desc><![CDATA[数字将自动转化为像素值]]></desc>
        <param name="name" type="value">
          <desc>属性名</desc>
        </param>
        <param name="value" type="String, Number">
          <desc>属性值</desc>
        </param>
        <example>
          <desc><![CDATA[将所有段落字体设为红色]]></desc>
          <code><![CDATA[$("p").css("color","red"); ]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="位置">
      <method name="offset" type="Object{top,left}" short="获取匹配元素在当前视口的相对偏移。">
        <desc><![CDATA[返回的对象包含两个整形属性：top 和 left。此方法只对可见元素有效。]]></desc>
        <example>
          <desc><![CDATA[获取第二段的偏移]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:last");
var offset = p.offset();
p.html( "left: " + offset.left + ", top: " + offset.top ); ]]></code>
          <result><![CDATA[<p>Hello</p><p>left: 0, top: 35</p> ]]></result>
        </example>
      </method>
      <method name="position" type="Object{top,left}" short="获取匹配元素相对父元素的偏移。">
        <desc><![CDATA[返回的对象包含两个整形属性：top 和 left。为精确计算结果，请在补白、边框和填充属性上使用像素单位。此方法只对可见元素有效。]]></desc>
        <example>
          <desc><![CDATA[获取第一段的偏移]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
var position = p.position();
$("p:last").html( "left: " + position.left + ", top: " + position.top ); ]]></code>
          <result><![CDATA[<p>Hello</p><p>left: 15, top: 15</p> ]]></result>
        </example>
      </method>
      <method name="scrollTop" type="Integer" short="获取匹配元素相对滚动条顶部的偏移。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[获取第一段相对滚动条顶部的偏移]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "scrollTop:" + p.scrollTop() );
]]></code>
          <result><![CDATA[<p>Hello</p><p>scrollTop: 0</p> ]]></result>
        </example>
      </method>
      <method name="scrollTop" type="jQuery" short="传递参数值时，设置滚动条顶部偏移为该值。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[设置相对滚动条顶部的偏移]]></desc>
          <code><![CDATA[$("div.demo").scrollTop(300);]]></code>
        </example>
      </method>
      <method name="scrollLeft" type="Integer" short="获取匹配元素相对滚动条左侧的偏移。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[获取第一段相对滚动条左侧的偏移]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "scrollLeft:" + p.scrollLeft() );
]]></code>
          <result><![CDATA[<p>Hello</p><p>scrollLeft: 0</p> ]]></result>
        </example>
      </method>
      <method name="scrollLeft" type="jQuery" short="传递参数值时，设置滚动条左侧偏移为该值。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[设置相对滚动条左侧的偏移]]></desc>
          <code><![CDATA[$("div.demo").scrollLeft(300);]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="尺寸">
      <method name="height" type="Integer" short="取得第一个匹配元素当前计算的高度值（px）。">
        <desc><![CDATA[在 jQuery 1.2 以后可以用来获取 window 和 document 的高]]></desc>
        <example>
          <desc><![CDATA[获取第一段的高]]></desc>
          <code><![CDATA[$("p").height(); ]]></code>
        </example>
        <example>
          <desc><![CDATA[获取文档的高 ]]></desc>
          <code><![CDATA[$(document).height(); ]]></code>
        </example>
      </method>
      <method name="height" type="jQuery" short="为每个匹配的元素设置CSS高度(hidth)属性的值。如果没有明确指定单位（如：em或%），使用px。">
        <desc><![CDATA[如果没有明确指定单位（如：em或%），使用px。]]></desc>
        <param name="val" type="String, Number">
          <desc>设定CSS中 'height' 的值</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落的高设为 20: ]]></desc>
          <code><![CDATA[$("p").height(20); ]]></code>
        </example>
      </method>
      <method name="width" type="Integer" short="取得第一个匹配元素当前计算的宽度值（px）。">
        <desc><![CDATA[在 jQuery 1.2 以后可以用来获取 window 和 document 的宽]]></desc>
        <example>
          <desc><![CDATA[获取第一段的宽]]></desc>
          <code><![CDATA[$("p").width(); ]]></code>
        </example>
        <example>
          <desc><![CDATA[获取当前窗口的宽]]></desc>
          <code><![CDATA[$(window).width(); ]]></code>
        </example>
      </method>
      <method name="width" type="jQuery" short="为每个匹配的元素设置CSS宽度(width)属性的值。">
        <desc><![CDATA[如果没有明确指定单位（如：em或%），使用px。]]></desc>
        <param name="val" type="String, Number">
          <desc>设定 CSS 'width' 的属性值</desc>
        </param>
        <example>
          <desc><![CDATA[将所有段落的宽设为 20: ]]></desc>
          <code><![CDATA[$("p").width(20); ]]></code>
        </example>
      </method>
      <method name="innerHeight" type="Integer" short="获取第一个匹配元素内部区域高度（包括补白、不包括边框）。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[获取第一段落内部区域高度。]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "innerHeight:" + p.innerHeight() );]]></code>
          <result><![CDATA[<p>Hello</p><p>innerHeight: 16</p> ]]></result>
        </example>
      </method>
      <method name="innerWidth" type="Integer" short="获取第一个匹配元素内部区域宽度（包括补白、不包括边框）。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <example>
          <desc><![CDATA[获取第一段落内部区域宽度。]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "innerWidth:" + p.innerWidth() );]]></code>
          <result><![CDATA[<p>Hello</p><p>innerWidth: 40</p> ]]></result>
        </example>
      </method>
      <method name="outerHeight" type="Integer" short="获取第一个匹配元素外部高度（默认包括补白和边框）。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <param name="options" type="Boolean">
          <desc>(false) 设置为 true 时，计算边距在内。</desc>
        </param>
        <example>
          <desc><![CDATA[获取第一段落外部高度。]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "outerHeight:" + p.outerHeight() + " , outerHeight(true):" + p.outerHeight(true) );]]></code>
          <result><![CDATA[<p>Hello</p><p>outerHeight: 35 , outerHeight(true):55</p> ]]></result>
        </example>
      </method>
      <method name="outerWidth" type="Integer" short="获取第一个匹配元素外部宽度（默认包括补白和边框）。">
        <desc><![CDATA[此方法对可见和隐藏元素均有效。]]></desc>
        <param name="options" type="Boolean">
          <desc>(false) 设置为 true 时，计算边距在内。</desc>
        </param>
        <example>
          <desc><![CDATA[获取第一段落外部宽度。]]></desc>
          <before><![CDATA[<p>Hello</p><p>2nd Paragraph</p> ]]></before>
          <code><![CDATA[var p = $("p:first");
$("p:last").text( "outerWidth:" + p.outerWidth() + " , outerWidth(true):" + p.outerWidth(true) );]]></code>
          <result><![CDATA[<p>Hello</p><p>outerWidth: 65 , outerWidth(true):85</p> ]]></result>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="事件">
    <subcat name="页面载入">
      <method name="ready" type="jQuery" short="当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。">
        <desc><![CDATA[<p>这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。</p><p>简单地说，这个方法纯粹是对向window.load事件注册事件的替代方法。通过使用这个方法，可以在DOM载入就绪能够读取并操纵时立即调用你所绑定的函数，而99.99%的JavaScript函数都需要在那一刻执行。</p><p>有一个参数－－对jQuery函数的引用－－会传递到这个ready事件处理函数中。可以给这个参数任意起一个名字，并因此可以不再担心命名冲突而放心地使用$别名。</p><p>请确保在 <body> 元素的onload事件中没有注册函数，否则不会触发$(document).ready()事件。</p><p>可以在同一个页面中无限次地使用$(document).ready()事件。其中注册的函数会按照（代码中的）先后顺序依次执行。</p>]]></desc>
        <param name="fn" type="Function">
          <desc>要在DOM就绪时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[在DOM加载完成时运行的代码，可以这样写：]]></desc>
          <code><![CDATA[$(document).ready(function(){
  // 在这里写你的代码...
});]]></code>
        </example>
        <example>
          <desc><![CDATA[使用 $(document).ready() 的简写，同时内部的 jQuery 代码依然使用 $ 作为别名，而不管全局的 $ 为何。]]></desc>
          <code><![CDATA[jQuery(function($) {
  // 你可以在这里继续使用$作为别名...
});]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="事件处理">
      <method name="bind" type="jQuery" short="为每一个匹配元素的特定事件（像click）绑定一个事件处理器函数。">
        <desc><![CDATA[这个事件处理函数会接收到一个事件对象，可以通过它来阻止（浏览器）默认的行为。如果既想取消默认的行为，又想阻止事件起泡，这个事件处理函数必须返回false。多数情况下，可以把事件处理器函数定义为匿名函数（见示例一）。在不可能定义匿名函数的情况下，可以传递一个可选的数据对象作为第二个参数（而事件处理器函数则作为第三个参数），见示例二。]]></desc>
        <param name="type" type="String">
          <desc>事件类型</desc>
        </param>
        <param name="data" type="Object" optional="true">
          <desc>(可选) 作为event.data属性值传递给事件对象的额外数据对象</desc>
        </param>
        <param name="fn" type="Function">
          <desc>绑定到每个匹配元素的事件上面的处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[当每个段落被点击的时候，弹出其文本。]]></desc>
          <code><![CDATA[$("p").bind("click", function(){
  alert( $(this).text() );
});]]></code>
        </example>
        <example>
          <desc><![CDATA[你可以在事件处理之前传递一些附加的数据。]]></desc>
          <code><![CDATA[function handler(event) {
  alert(event.data.foo);
}
$("p").bind("click", {foo: "bar"}, handler) ]]></code>
        </example>
        <example>
          <desc><![CDATA[通过返回false来取消默认的行为并阻止事件起泡。]]></desc>
          <code><![CDATA[$("form").bind("submit", function() { return false; }) ]]></code>
        </example>
        <example>
          <desc><![CDATA[通过使用 preventDefault() 方法只取消默认的行为。]]></desc>
          <code><![CDATA[$("form").bind("submit", function(event){
  event.preventDefault();
});]]></code>
        </example>
        <example>
          <desc><![CDATA[通过使用 stopPropagation() 方法只阻止一个事件起泡。]]></desc>
          <code><![CDATA[$("form").bind("submit", function(event){
  event.stopPropagation();
});]]></code>
        </example>
      </method>
      <method name="one" type="jQuery" short="为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。">
        <desc><![CDATA[<p>在每个对象上，这个事件处理函数只会被执行一次。其他规则与bind()函数相同。这个事件处理函数会接收到一个事件对象，可以通过它来阻止（浏览器）默认的行为。如果既想取消默认的行为，又想阻止事件起泡，这个事件处理函数必须返回false。</p><p>多数情况下，可以把事件处理函数定义为匿名函数（见示例一）。在不可能定义匿名函数的情况下，可以传递一个可选的数据对象作为第二个参数（而事件处理函数则作为第三个参数），见示例二。</p>]]></desc>
        <param name="type" type="String">
          <desc>事件类型</desc>
        </param>
        <param name="data" type="Object" optional="true">
          <desc>(可选) 作为event.data属性值传递给事件对象的额外数据对象</desc>
        </param>
        <param name="fn" type="Function">
          <desc>绑定到每个匹配元素的事件上面的处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[当所有段落被第一次点击的时候，显示所有其文本。]]></desc>
          <code><![CDATA[$("p").one("click", function(){
  alert( $(this).text() );
});]]></code>
        </example>
      </method>
      <method name="trigger" type="jQuery" short="在每一个匹配的元素上触发某类事件。">
        <desc><![CDATA[<p>这个函数也会导致浏览器同名的默认行为的执行。比如，如果用trigger()触发一个'submit'，则同样会导致浏览器提交表单。如果要阻止这种默认行为，应返回false。</p><p>你也可以触发由bind()注册的自定义事件而不限于浏览器默认事件。</p><p>事件处理函数会收到一个修复的(规范化的)事件对象，但这个对象没有特定浏览器才有的属性，比如keyCode。</p><p>jQuery也支持 <a href="http://docs.jquery.com/Namespaced_Events">命名空间事件</a>。这允许你触发或者解除绑定一组特定的事件处理函数，而无需一一个指定。你可以在事件类型后面加上感叹号 ! 来只触发那些没有命名空间的事件处理函数。</p><p><strong>jQuery 1.3中新增：</strong></p><p>所有触发的事件现在会冒泡到DOM树上了。举例来说，如果你在一个段落p上触发一个事件，他首先会在这个元素上触发，其次到父元素，在到父元素的父元素，直到触发到document对象。这个事件对象有一个 .target 属性指向最开始触发这个事件的元素。你可以用 stopPropagation() 来阻止事件冒泡，或者在事件处理函数中返回false即可。</p><p>事件对象构造器现在已经公开，并且你可以自行创建一个事件对象。这个事件对象可以直接传递给trigger所触发的事件处理函数。事件对象的完整属性列表可以在 <a href="http://docs.jquery.com/Events/jQuery.Event">jQuery.Event</a> 的文档里找到。</p><p>你可以有三种方式指定事件类型：</p><p>* 你可以传递字符串型的事件名称(type参数)。</p><p>* 你可以使用jQuery.Event对象。可以将数据放进这个对象，并且这个对象可以被触发的事件处理函数获取到。</p><p>* 最后，你可以传递一个带有数据的字面量对象。他将被复制到真正的jQuery.Event对象上去。 注意在这种情况下你<strong>必须</strong>指定一个 <em>type</em> 属性。</p>]]></desc>
        <param name="type" type="String,Event,Object">
          <desc>一个事件对象或者要触发的事件类型</desc>
        </param>
        <param name="data" type="Array" optional="true">
          <desc>(可选)传递给事件处理函数的附加参数</desc>
        </param>
        <example>
          <desc><![CDATA[提交第一个表单，但不用submit()]]></desc>
          <code><![CDATA[$("form:first").trigger("submit") ]]></code>
        </example>
        <example>
          <desc><![CDATA[给一个事件传递参数]]></desc>
          <code><![CDATA[$("p").click( function (event, a, b) {
  // 一个普通的点击事件时，a和b是undefined类型
  // 如果用下面的语句触发，那么a指向"foo",而b指向"bar"
} ).trigger("click", ["foo", "bar"]); ]]></code>
        </example>
        <example>
          <desc><![CDATA[下面的代码可以显示一个"Hello World"]]></desc>
          <code><![CDATA[$("p").bind("myEvent", function (event, message1, message2) {
  alert(message1 + ' ' + message2);
});
$("p").trigger("myEvent", ["Hello","World!"]); ]]></code>
        </example>
      </method>
      <method name="triggerHandler" type="jQuery" short="这个特别的方法将会触发指定的事件类型上所有绑定的处理函数。但不会执行浏览器默认动作，也不会产生事件冒泡。">
        <desc><![CDATA[这个方法的行为表现与trigger类似，但有以下三个主要区别： <p>* 第一，他不会触发浏览器默认事件。</p><p>* 第二，只触发jQuery对象集合中第一个元素的事件处理函数。</p>* 第三，这个方法的返回的是事件处理函数的返回值，而不是据有可链性的jQuery对象。此外，如果最开始的jQuery对象集合为空，则这个方法返回 undefined 。<p></p>]]></desc>
        <param name="type" type="String">
          <desc>要触发的事件类型</desc>
        </param>
        <param name="data" type="Array" optional="true">
          <desc>(可选)传递给事件处理函数的附加参数</desc>
        </param>
        <example>
          <desc><![CDATA[如果你对一个focus事件执行了 .triggerHandler() ，浏览器默认动作将不会被触发，只会触发你绑定的动作。]]></desc>
          <before><![CDATA[<button id="old">.trigger("focus")</button>
<button id="new">.triggerHandler("focus")</button><br/><br/>
<input type="text" value="To Be Focused"/> ]]></before>
          <code><![CDATA[$("#old").click(function(){
  $("input").trigger("focus");
});
$("#new").click(function(){
  $("input").triggerHandler("focus");
});
$("input").focus(function(){
  $("<span>Focused!</span>").appendTo("body").fadeOut(1000);
});]]></code>
        </example>
      </method>
      <method name="unbind" type="jQuery" short="bind()的反向操作，从每一个匹配的元素中删除绑定的事件。">
        <desc><![CDATA[<p>如果没有参数，则删除所有绑定的事件。</p><p>你可以将你用bind()注册的自定义事件取消绑定。</p><p>I如果提供了事件类型作为参数，则只删除该类型的绑定事件。</p><p>如果把在绑定时传递的处理函数作为第二个参数，则只有这个特定的事件处理函数会被删除。</p>]]></desc>
        <param name="type" type="String" optional="true">
          <desc>(可选) 事件类型</desc>
        </param>
        <param name="data" type="Function" optional="true">
          <desc>(可选) 要从每个匹配元素的事件中反绑定的事件处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[把所有段落的所有事件取消绑定]]></desc>
          <code><![CDATA[$("p").unbind() ]]></code>
        </example>
        <example>
          <desc><![CDATA[将段落的click事件取消绑定]]></desc>
          <code><![CDATA[$("p").unbind( "click" ) ]]></code>
        </example>
        <example>
          <desc><![CDATA[删除特定函数的绑定，将函数作为第二个参数传入]]></desc>
          <code><![CDATA[var foo = function () {
  // 处理某个事件的代码
};

$("p").bind("click", foo); // ... 当点击段落的时候会触发 foo 

$("p").unbind("click", foo); // ... 再也不会被触发 foo ]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="事件委派">
      <method name="live" type="jQuery" short="jQuery 1.3中新增的方法。给所有当前以及将来会匹配的元素绑定一个事件处理函数（比如click事件）。也能绑定自定义事件。">
        <desc><![CDATA[<p>目前支持 click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, keydown, keypress, keyup。 <br>还不支持 blur, focus, mouseenter, mouseleave, change, submit <br>与bind()不同的是，live()一次只能绑定一个事件。</p><p>这个方法跟传统的bind很像，区别在于用live来绑定事件会给所有当前以及将来在页面上的元素绑定事件(使用委派的方式)。比如说，如果你给页面上所有的li用live绑定了click事件。那么当在以后增加一个li到这个页面时，对于这个新增加的li，其click事件依然可用。而无需重新给这种新增加的元素绑定事件。</p><p>.live()与流行的liveQuery插件很像，但有以下几个主要区别：</p><ul><li>.live 目前只支持所有事件的子集，支持列表参考上面的说明。</li><li>.live 不支持liveQuery提供的“无事件”样式的回调函数。.live只能绑定事件处理函数。</li><li>.live 没有"setup"和"cleanup"的过程。因为所有的事件是委派而不是直接绑定在元素上的。</li></ul><p>要移除用live绑定的事件，请用die方法</p>]]></desc>
        <param name="type" type="String">
          <desc>一个或多个用空格分隔的事件名</desc>
        </param>
        <param name="fn" type="Function">
          <desc>欲绑定的事件处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[点击生成的p依然据有同样的功能。]]></desc>
          <before><![CDATA[<p>Click me!</p>]]></before>
          <code><![CDATA[$("p").live("click", function(){
    $(this).after("<p>Another paragraph!</p>");
});]]></code>
        </example>
      </method>
      <method name="die" type="jQuery" short="jQuery 1.3新增。此方法与live正好完全相反。">
        <desc><![CDATA[<p>如果不带参数，则所有绑定的live事件都会被移除。</p><p>你可以解除用live注册的自定义事件。</p><p>如果提供了type参数，那么会移除对应的live事件。</p><p>如果也指定了第二个参数function,则只移出指定的事件处理函数。</p>]]></desc>
        <param name="type" type="String" optional="true">
          <desc>可选，要解除绑定的live事件</desc>
        </param>
        <param name="fn" type="Function" optional="true">
          <desc>可选，要解除绑定的特定处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[给按钮解除click事件]]></desc>
          <code><![CDATA[  function aClick() {
      $("div").show().fadeOut("slow");
  }
  $("#unbind").click(function () {
      $("#theone").die("click", aClick)
  });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="事件切换">
      <method name="hover" type="jQuery" short="一个模仿悬停事件（鼠标移动到一个对象上面及移出这个对象）的方法。这是一个自定义的方法，它为频繁使用的任务提供了一种“保持在其中”的状态。">
        <desc><![CDATA[当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。而且，会伴随着对鼠标是否仍然处在特定元素中的检测（例如，处在div中的图像），如果是，则会继续保持“悬停”状态，而不触发移出事件（修正了使用mouseout事件的一个常见错误）。]]></desc>
        <param name="over" type="Function">
          <desc>鼠标移到元素上要触发的函数</desc>
        </param>
        <param name="out" type="Function">
          <desc>鼠标移出元素要触发的函数</desc>
        </param>
        <example>
          <desc><![CDATA[鼠标悬停的表格加上特定的类]]></desc>
          <code><![CDATA[$("td").hover(
  function () {
    $(this).addClass("hover");
  },
  function () {
    $(this).removeClass("hover");
  }
); ]]></code>
        </example>
      </method>
      <method name="toggle" type="jQuery" short="每次点击后依次调用函数。">
        <desc><![CDATA[<p>如果点击了一个匹配的元素，则触发指定的第一个函数，当再次点击同一元素时，则触发指定的第二个函数，如果有更多函数，则再次触发，直到最后一个。随后的每次点击都重复对这几个函数的轮番调用。</p><p>可以使用unbind("click")来删除。</p>]]></desc>
        <param name="fn" type="Function">
          <desc>第一数次点击时要执行的函数。</desc>
        </param>
        <param name="fn2" type="Function">
          <desc>第二数次点击时要执行的函数。</desc>
        </param>
        <param name="fn3,fn4,..." type="Function">
          <desc>更多次点击时要执行的函数。</desc>
        </param>
        <example>
          <desc><![CDATA[对表格的切换一个类]]></desc>
          <before><![CDATA[  <ul>
    <li>Go to the store</li>
    <li>Pick up dinner</li>
    <li>Debug crash</li>
    <li>Take a jog</li>
  </ul>]]></before>
          <code><![CDATA[$("td").toggle(
  function () {
    $(this).addClass("selected");
  },
  function () {
    $(this).removeClass("selected");
  }
); ]]></code>
        </example>
        <example>
          <desc><![CDATA[对列表的切换样式]]></desc>
          <before><![CDATA[  <ul>
    <li>Go to the store</li>
    <li>Pick up dinner</li>
    <li>Debug crash</li>
    <li>Take a jog</li>
  </ul>]]></before>
          <code><![CDATA[    $("li").toggle(
      function () {
        $(this).css({"list-style-type":"disc", "color":"blue"});
      },
      function () {
        $(this).css({"list-style-type":"disc", "color":"red"});
      },
      function () {
        $(this).css({"list-style-type":"", "color":""});
      }
    );]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="事件">
      <method name="blur" type="jQuery" short="触发每一个匹配元素的blur事件。">
        <desc><![CDATA[这个函数会调用执行绑定到blur事件的所有函数，包括浏览器的默认行为。可以通过返回false来防止触发浏览器的默认行为。blur事件会在元素失去焦点的时候触发，既可以是鼠标行为，也可以是按tab键离开的]]></desc>
        <example>
          <desc><![CDATA[触发所有段落的blur事件]]></desc>
          <code><![CDATA[$("p").blur(); ]]></code>
        </example>
      </method>
      <method name="blur" type="jQuery" short="在每一个匹配元素的blur事件中绑定一个处理函数。">
        <desc><![CDATA[blur事件会在元素失去焦点的时候触发，既可以是鼠标行为，也可以是按tab键离开的]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的blur事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[任何段落失去焦点时弹出一个 "Hello World!"在每一个匹配元素的blur事件中绑定的处理函数。]]></desc>
          <code><![CDATA[$("p").blur( function () { alert("Hello World!"); } ); ]]></code>
        </example>
      </method>
      <method name="change" type="jQuery" short="触发每个匹配元素的change事件">
        <desc><![CDATA[这个函数会调用执行绑定到change事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。change事件会在元素失去焦点的时候触发，也会当其值在获得焦点后改变时触发。]]></desc>
      </method>
      <method name="change" type="jQuery" short="在每一个匹配元素的change事件中绑定一个处理函数。">
        <desc><![CDATA[change事件会在元素失去焦点的时候触发，也会当其值在获得焦点后改变时触发。]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的change事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[给所有的文本框增加输入验证]]></desc>
          <code><![CDATA[$("input[type='text']").change( function() {
  // 这里可以写些验证代码
});]]></code>
        </example>
      </method>
      <method name="click" type="jQuery" short="触发每一个匹配元素的click事件。">
        <desc><![CDATA[这个函数会调用执行绑定到click事件的所有函数。]]></desc>
        <example>
          <desc><![CDATA[触发页面内所有段落的点击事件]]></desc>
          <code><![CDATA[$("p").click(); ]]></code>
        </example>
      </method>
      <method name="click" type="jQuery" short="在每一个匹配元素的click事件中绑定一个处理函数。">
        <desc><![CDATA[点击事件会在你的指针设备的按钮在元素上单击时触发。单击的定义是在屏幕的同一点触发了mousedown和mouseup.几个事件触发的顺序是：<p>mousedown</p><p>mouseup</p><p>click</p>]]></desc>
        <param name="fn" type="Function">
          <desc>绑定到click事件的函数</desc>
        </param>
        <example>
          <desc><![CDATA[将页面内所有段落点击后隐藏。]]></desc>
          <code><![CDATA[$("p").click( function () { $(this).hide(); });]]></code>
        </example>
      </method>
      <method name="dblclick" type="jQuery" short="触发每一个匹配元素的dbclick事件。">
        <desc><![CDATA[这个函数会调用执行绑定到dblclick事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。dblclick事件会在元素的同一点双击时触发。]]></desc>
      </method>
      <method name="dblclick" type="jQuery" short="在每一个匹配元素的dblclick事件中绑定一个处理函数。">
        <desc><![CDATA[的那个在某个元素上双击的时候就会触发dblclick事件]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的dblclick事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[给页面上每个段落的双击事件绑上 "Hello World!" 警告框]]></desc>
          <code><![CDATA[$("p").dblclick( function () { alert("Hello World!"); });]]></code>
        </example>
      </method>
      <method name="error" type="jQuery" short="这个函数会调用执行绑定到error事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。">
        <desc><![CDATA[This causes all of the functions that have been bound to that error event to be executed, and calls the browser's default error action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the error event. The error event usually fires when an element loses focus either via the pointing device or by tabbing navigation.]]></desc>
      </method>
      <method name="error" type="jQuery" short="在每一个匹配元素的error事件中绑定一个处理函数。">
        <desc><![CDATA[<p>对于error事件，没有一个公众的标准。在大多数浏览器中，当页面的JavaScript发生错误时，window对象会触发error事件;当图像的src属性无效时，比如文件不存在或者图像数据错误时，也会触发图像对象的error事件。</p><p>如果异常是由window对象抛出，事件处理函数将会被传入三个参数：</p><p>1. 描述事件的信息 ("varName is not defined", "missing operator in expression", 等等.),</p><p>2. 包含错误的文档的完整URL</p><p>3. 异常发生的行数</p> <p>如果事件处理函数返回true，则表示事件已经被处理，浏览器将认为没有异常。</p><p>更多相关信息: </p><p><a href="http://msdn2.microsoft.com/en-us/library/ms536930.aspx">msdn - onerror Event</a></p><p><a href="http://developer.mozilla.org/en/docs/DOM:window.onerror">Gecko DOM Reference - onerror Event</a></p><p><a href="http://developer.mozilla.org/en/docs/DOM:event">Gecko DOM Reference - Event object</a></p><p><a href="http://en.wikipedia.org/wiki/DOM_Events">Wikipedia: DOM Events</a></p>]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的error事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[在服务器端记录JavaScript错误日志: ]]></desc>
          <code><![CDATA[$(window).error(function(msg, url, line){
  jQuery.post("js_error_log.php", { msg: msg, url: url, line: line });
});]]></code>
        </example>
        <example>
          <desc><![CDATA[隐藏JavaScript错误: ]]></desc>
          <code><![CDATA[$(window).error(function(){
  return true;
});]]></code>
        </example>
        <example>
          <desc><![CDATA[给你IE的用户隐藏无效的图像: ]]></desc>
          <code><![CDATA[$("img").error(function(){
  $(this).hide();
});]]></code>
        </example>
      </method>
      <method name="focus" type="jQuery" short="触发每一个匹配元素的focus事件。">
        <desc><![CDATA[这将触发所有绑定的focus函数，注意，某些对象不支持focus方法。]]></desc>
        <example>
          <desc><![CDATA[当页面加载后将 id 为 'login' 的元素设置焦点: ]]></desc>
          <code><![CDATA[$(document).ready(function(){
  $("#login").focus();
});]]></code>
        </example>
      </method>
      <method name="focus" type="jQuery" short="在每一个匹配元素的focus事件中绑定一个处理函数。">
        <desc><![CDATA[focus事件可以通过鼠标点击或者键盘上的TAB导航触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的focus事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[使人无法使用文本框: ]]></desc>
          <code><![CDATA[$("input[type=text]").focus(function(){
  this.blur();
});]]></code>
        </example>
      </method>
      <method name="keydown" type="jQuery" short="触发每一个匹配元素的keydown事件">
        <desc><![CDATA[这个函数会调用执行绑定到keydown事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keydown事件会在键盘按下时触发。]]></desc>
      </method>
      <method name="keydown" type="jQuery" short="在每一个匹配元素的keydown事件中绑定一个处理函数。">
        <desc><![CDATA[keydown事件会在键盘按下时触发。]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的keydown事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[在页面内对键盘按键做出回应，可以使用如下代码: ]]></desc>
          <code><![CDATA[$(window).keydown(function(event){
  switch(event.keyCode) {
    // ...
    // 不同的按键可以做不同的事情
    // 不同的浏览器的keycode不同
    // 更多详细信息:     http://unixpapa.com/js/key.html
    // ...
  }
});]]></code>
        </example>
      </method>
      <method name="keypress" type="jQuery" short="触发每一个匹配元素的keypress事件">
        <desc><![CDATA[T这个函数会调用执行绑定到keydown事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keydown事件会在键盘按下时触发]]></desc>
      </method>
      <method name="keypress" type="jQuery" short="在每一个匹配元素的keypress事件中绑定一个处理函数。">
        <desc><![CDATA[keypress事件会在敲击按键时触发。 敲击按键的定义为按下并抬起同一个按键。这几个事件发生的顺序是:<p>keydown</p><p>keypress</p><p>keyup</p>]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的keypress事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="keyup" type="jQuery" short="触发每一个匹配元素的keyup事件">
        <desc><![CDATA[这个函数会调用执行绑定到keyup事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。keyup事件会在按键释放时触发。]]></desc>
      </method>
      <method name="keyup" type="jQuery" short="在每一个匹配元素的keyup事件中绑定一个处理函数。">
        <desc><![CDATA[keyup 事件会在键盘按下时触发。]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的keyup事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="load" type="jQuery" short="在每一个匹配元素的load事件中绑定一个处理函数。">
        <desc><![CDATA[<p>如果绑定给window对象，则会在所有内容加载后触发，包括窗口，框架，对象和图像。如果绑定在元素上，则当元素的内容加载完毕后触发。</p><p><strong>注意:</strong>只有当在这个元素完全加载完之前绑定load的处理函数,才会在他加载完后触发。如果之后再绑定就永远不会触发了。所以<strong>不要</strong>在$(document).ready()里绑定load事件，因为jQuery会在所有DOM加载完成后再绑定load事件。</p>]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的load事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="mousedown" type="jQuery" short="在每一个匹配元素的mousedown事件中绑定一个处理函数。">
        <desc><![CDATA[mousedown事件在鼠标在元素上点击后会触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的mousedown事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="mousemove" type="jQuery" short="在每一个匹配元素的mousemove事件中绑定一个处理函数。">
        <desc><![CDATA[mousemove 事件通过鼠标在元素上移动来触发。事件处理函数会被传递一个变量——事件对象，其.clientX 和 .clientY 属性代表鼠标的坐标]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的mousemove事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="mouseout" type="jQuery" short="在每一个匹配元素的mouseout事件中绑定一个处理函数。">
        <desc><![CDATA[mouseout事件在鼠标从元素上离开后会触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的mouseout事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="mouseover" type="jQuery" short="在每一个匹配元素的mouseover事件中绑定一个处理函数。">
        <desc><![CDATA[mouseover事件会在鼠标移入对象时触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的mouseover事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="mouseup" type="jQuery" short="在每一个匹配元素的mouseup事件中绑定一个处理函数。">
        <desc><![CDATA[mouseup事件会在鼠标点击对象释放时]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的mouseup事件中绑定的处理函数。</desc>
        </param>
      </method>
      <method name="resize" type="jQuery" short="在每一个匹配元素的resize事件中绑定一个处理函数。">
        <desc><![CDATA[当文档窗口改变大小时触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的resize事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[让人每次改变页面窗口的大小时很郁闷的方法: ]]></desc>
          <code><![CDATA[$(window).resize(function(){
  alert("Stop it!");
});]]></code>
        </example>
      </method>
      <method name="scroll" type="jQuery" short="在每一个匹配元素的scroll事件中绑定一个处理函数。">
        <desc><![CDATA[当滚动条发生变化时触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的resize事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[当页面滚动条变化时，执行的函数: ]]></desc>
          <code><![CDATA[$(window).scroll( function() { /* ...do something... */ } ); ]]></code>
        </example>
      </method>
      <method name="select" type="jQuery" short="触发每一个匹配元素的select事件">
        <desc><![CDATA[这个函数会调用执行绑定到select事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。]]></desc>
        <example>
          <desc><![CDATA[触发所有input元素的select事件: ]]></desc>
          <code><![CDATA[$("input").select(); ]]></code>
        </example>
      </method>
      <method name="select" type="jQuery" short="在每一个匹配元素的select事件中绑定一个处理函数。">
        <desc><![CDATA[当用户在文本框(包括input和textarea)中选中某段文本时会触发select事件。]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的select事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[当文本框中文本被选中时执行的函数: ]]></desc>
          <code><![CDATA[$(":text").select( function () { /* ...do something... */ } ); ]]></code>
        </example>
      </method>
      <method name="submit" type="jQuery" short="触发每一个匹配元素的submit事件。">
        <desc><![CDATA[这个函数会调用执行绑定到submit事件的所有函数，包括浏览器的默认行为。可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为。]]></desc>
        <example>
          <desc><![CDATA[提交本页的第一个表单: ]]></desc>
          <code><![CDATA[$("form:first").submit(); ]]></code>
        </example>
      </method>
      <method name="submit" type="jQuery" short="在每一个匹配元素的submit事件中绑定一个处理函数。">
        <desc><![CDATA[submit事件将会在表单提交时触发]]></desc>
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的submit事件中绑定的处理函数</desc>
        </param>
        <example>
          <desc><![CDATA[如果你要阻止表单提交: ]]></desc>
          <code><![CDATA[$("form").submit( function () {
  return false;
} ); ]]></code>
        </example>
      </method>
      <method name="unload" type="jQuery" short="在每一个匹配元素的unload事件中绑定一个处理函数。">
        <param name="fn" type="Function">
          <desc>在每一个匹配元素的unload事件中绑定的处理函数。</desc>
        </param>
        <example>
          <desc><![CDATA[页面卸载的时候弹出一个警告框: ]]></desc>
          <code><![CDATA[$(window).unload( function () { alert("Bye now!"); } ); ]]></code>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="效果">
    <subcat name="基本">
      <method name="show" type="jQuery" short="显示隐藏的匹配元素。">
        <desc><![CDATA[这个就是 'show( speed, [callback] )' 无动画的版本。如果选择的元素是可见的，这个方法将不会改变任何东西。无论这个元素是通过hide()方法隐藏的还是在CSS里设置了display:none;，这个方法都将有效。]]></desc>
        <example>
          <desc><![CDATA[显示所有段落]]></desc>
          <before><![CDATA[<p style="display: none">Hello</p> ]]></before>
          <code><![CDATA[$("p").show() ]]></code>
        </example>
      </method>
      <method name="show" type="jQuery" short="以优雅的动画显示所有匹配的元素，并在显示完成后可选地触发一个回调函数。">
        <desc><![CDATA[可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="Function">
          <desc>(Optional) 在动画完成时执行的函数，每个元素执行一次。</desc>
        </param>
        <example>
          <desc><![CDATA[用缓慢的动画将隐藏的段落显示出来，历时600毫秒。]]></desc>
          <before><![CDATA[<p style="display: none">Hello</p> ]]></before>
          <code><![CDATA[$("p").show("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用迅速的动画将隐藏的段落显示出来，历时200毫秒。并在之后执行反馈！]]></desc>
          <before><![CDATA[<p style="display: none">Hello</p> ]]></before>
          <code><![CDATA[$("p").show("fast",function(){
   $(this).text("Animation Done!");
 });]]></code>
        </example>
        <example>
          <desc><![CDATA[将隐藏的段落用将近4秒的时间显示出来。。。并在之后执行一个反馈。。。]]></desc>
          <before><![CDATA[<p style="display: none">Hello</p> ]]></before>
          <code><![CDATA[$("p").show(4000,function(){
   $(this).text("Animation Done...");
 });]]></code>
        </example>
      </method>
      <method name="hide" type="jQuery" short="隐藏显示的元素">
        <desc><![CDATA[这个就是 'hide( speed, [callback] )' 的无动画版。如果选择的元素是隐藏的，这个方法将不会改变任何东西。]]></desc>
        <example>
          <desc><![CDATA[隐藏所有段落]]></desc>
          <code><![CDATA[$("p").hide() ]]></code>
        </example>
      </method>
      <method name="hide" type="jQuery" short="以优雅的动画隐藏所有匹配的元素，并在显示完成后可选地触发一个回调函数。">
        <desc><![CDATA[可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="FunctionFunction">
          <desc>(Optional) 在动画完成时执行的函数，每个元素执行一次。</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒的时间将段落缓慢的隐藏]]></desc>
          <code><![CDATA[$("p").hide("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒将段落迅速隐藏，之后弹出一个对话框。]]></desc>
          <code><![CDATA[$("p").hide("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
      <method name="toggle" type="jQuery" short="切换元素的可见状态。">
        <desc><![CDATA[如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。]]></desc>
        <example>
          <desc><![CDATA[切换所有段落的可见状态。]]></desc>
          <before><![CDATA[<p>Hello</p><p style="display: none">Hello Again</p> ]]></before>
          <code><![CDATA[$("p").toggle() ]]></code>
          <result><![CDATA[<p tyle="display: none">Hello</p><p style="display: block">Hello Again</p> ]]></result>
        </example>
      </method>
      <method name="toggle" type="jQuery" short="根据switch参数切换元素的可见状态（ture为可见，false为隐藏）。">
        <desc><![CDATA[如果switch设为true，则调用show()方法来显示匹配的元素，如果switch设为false则调用hide()来隐藏元素。]]></desc>
        <example>
          <desc><![CDATA[切换所有段落的可见状态。]]></desc>
          <before><![CDATA[<p>Hello</p><p style="display: none">Hello Again</p> ]]></before>
          <code><![CDATA[  var flip = 0;
  $("button").click(function () {
      $("p").toggle( flip++ % 2 == 0 );
  });]]></code>
          <result><![CDATA[<p tyle="display: none">Hello</p><p style="display: block">Hello Again</p> ]]></result>
        </example>
      </method>
      <method name="toggle" type="jQuery" short="以优雅的动画切换所有匹配的元素，并在显示完成后可选地触发一个回调函数。">
        <desc><![CDATA[可以根据指定的速度动态地改变每个匹配元素的高度、宽度和不透明度。在jQuery 1.3中，padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="FunctionFunction">
          <desc>(Optional) 在动画完成时执行的函数，每个元素执行一次。</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒的时间将段落缓慢的切换显示状态]]></desc>
          <code><![CDATA[$("p").toggle("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒将段落迅速切换显示状态，之后弹出一个对话框。]]></desc>
          <code><![CDATA[$("p").toggle("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="滑动">
      <method name="slideDown" type="jQuery" short="通过高度变化（向下增大）来动态地显示所有匹配的元素，在显示完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式显示出来。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="FunctionFunction" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落滑下]]></desc>
          <code><![CDATA[$("p").slideDown("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落滑下，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").slideDown("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
      <method name="slideUp" type="jQuery" short="通过高度变化（向上减小）来动态地隐藏所有匹配的元素，在隐藏完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏起来。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落滑上]]></desc>
          <code><![CDATA[$("p").slideUp("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落滑上，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").slideUp("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
      <method name="slideToggle" type="jQuery" short="通过高度变化来切换所有匹配元素的可见性，并在切换完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏或显示。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落滑上或滑下]]></desc>
          <code><![CDATA[$("p").slideToggle("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落滑上或滑下，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").slideToggle("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="淡入淡出">
      <method name="fadeIn" type="jQuery" short="通过不透明度的变化来实现所有匹配元素的淡入效果，并在动画完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(Optional) (可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落淡入]]></desc>
          <code><![CDATA[$("p").fadeIn("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落淡入，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").fadeIn("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
      <method name="fadeOut" type="jQuery" short="通过不透明度的变化来实现所有匹配元素的淡出效果，并在动画完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落淡出]]></desc>
          <code><![CDATA[$("p").fadeOut("slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落淡出，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").fadeOut("fast",function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
      <method name="fadeTo" type="jQuery" short="把所有匹配元素的不透明度以渐进方式调整到指定的不透明度，并在动画完成后可选地触发一个回调函数。">
        <desc><![CDATA[这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。]]></desc>
        <param name="speed" type="String,Number">
          <desc>三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="opacity" type="Number">
          <desc>要调整到的不透明度值(0到1之间的数字).</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[用600毫秒缓慢的将段落的透明度调整到0.66，大约2/3的可见度]]></desc>
          <code><![CDATA[$("p").fadeTo("slow", 0.66);$("p").fadeTo("slow", 0.66); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用200毫秒快速将段落的透明度调整到0.25，大约1/4的可见度，之后弹出一个对话框]]></desc>
          <code><![CDATA[$("p").fadeTo("fast", 0.25, function(){
   alert("Animation Done.");
 });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="自定义">
      <method name="animate" type="jQuery" short="用于创建自定义动画的函数。">
        <desc><![CDATA[这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。<p>注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left. </p><p>而每个属性的值表示这个样式属性到多少时动画结束。如果是一个数值，样式属性就会从当前的值渐变到指定的值。如果使用的是“hide”、“show”或“toggle”这样的字符串值，则会为该属性调用默认的动画形式。</p><p>在 jQuery 1.2 中，你可以使用 em 和 % 单位。另外，在 jQuery 1.2 中，你可以通过在属性值前面指定 "<em>+=</em>" 或 "<em>-=</em>" 来让元素做相对运动。</p><p>jQuery 1.3中，如果duration设为0则直接完成动画。而在以前版本中则会执行默认动画。</p>]]></desc>
        <param name="params" type="Options">
          <desc>一组包含作为动画属性和终值的样式属性和及其值的集合</desc>
        </param>
        <param name="duration" type="String,Number" optional="true">
          <desc>(可选) 三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </param>
        <param name="easing" type="String" optional="true">
          <desc>(可选) 要使用的擦除效果的名称(需要插件支持).默认jQuery提供"linear" 和 "swing".</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 在动画完成时执行的函数</desc>
        </param>
        <example>
          <desc><![CDATA[点击按钮后div元素的几个不同属性一同变化]]></desc>
          <before><![CDATA[<button id="go"> Run</button>
<div id="block">Hello!</div> ]]></before>
          <code><![CDATA[// 在一个动画中同时应用三种类型的效果
$("#go").click(function(){
  $("#block").animate({ 
    width: "90%",
    height: "100%", 
    fontSize: "10em", 
    borderWidth: 10
  }, 1000 );
});]]></code>
        </example>
        <example>
          <desc><![CDATA[让指定元素左右移动]]></desc>
          <before><![CDATA[<button id="left">«</button> <button id="right">»</button>
<div class="block"></div> ]]></before>
          <code><![CDATA[$("#right").click(function(){
  $(".block").animate({left: '+50px'}, "slow");
});

$("#left").click(function(){
  $(".block").animate({left: '-50px'}, "slow");
});]]></code>
        </example>
        <example>
          <desc><![CDATA[在600毫秒内切换段落的高度和透明度]]></desc>
          <code><![CDATA[$("p").animate({
   height: 'toggle', opacity: 'toggle'
 }, "slow"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[用500毫秒将段落移到left为50的地方并且完全清晰显示出来（透明度为1） ]]></desc>
          <code><![CDATA[$("p").animate({
   left: 50, opacity: 'show'
 }, 500); ]]></code>
        </example>
        <example>
          <desc><![CDATA[一个使用“easein”函数提供不同动画样式的例子。只有使用了插件来提供这个“easein”函数，这个参数才起作用。]]></desc>
          <code><![CDATA[$("p").animate({
   opacity: 'show'
 }, "slow", "easein"); ]]></code>
        </example>
      </method>
      <method name="animate" type="jQuery" short="用于创建自定义动画的函数。">
        <desc><![CDATA[这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。<p>注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left. </p><p>而每个属性的值表示这个样式属性到多少时动画结束。如果是一个数值，样式属性就会从当前的值渐变到指定的值。如果使用的是“hide”、“show”或“toggle”这样的字符串值，则会为该属性调用默认的动画形式。</p><p>在 jQuery 1.2 中，你可以使用 em 和 % 单位。另外，在 jQuery 1.2 中，你可以通过在属性值前面指定 "<em>+=</em>" 或 "<em>-=</em>" 来让元素做相对运动。</p>]]></desc>
        <param name="params" type="Options">
          <desc>一组包含作为动画属性和终值的样式属性和及其值的集合</desc>
        </param>
        <param name="options" type="Options">
          <desc>一组包含动画选项的值的集合。</desc>
        </param>
        <option name="duration" type="String,Number">
          <desc>(默认值: "normal") 三种预定速度之一的字符串("slow", "normal", or "fast")或表示动画时长的毫秒数值(如：1000)</desc>
        </option>
        <option name="easing" type="String">
          <desc>(默认值: "swing") 要使用的擦除效果的名称(需要插件支持).默认jQuery提供"linear" 和 "swing".</desc>
        </option>
        <option name="complete" type="Function">
          <desc>在动画完成时执行的函数</desc>
        </option>
        <option name="step" type="Callback">
          <desc></desc>
        </option>
        <option name="queue" type="Boolean">
          <desc>(默认值: true) 设定为false将使此动画不进入动画队列 (jQuery 1.2中新增)</desc>
        </option>
        <example>
          <desc><![CDATA[第一个按钮按了之后展示了不在队列中的动画。在div扩展到90%的同时也在增加字体，一旦字体改变完毕后，边框的动画才开始。]]></desc>
          <before><![CDATA[<button id="go1">» Animate Block1</button>
<button id="go2">» Animate Block2</button>
<div id="block1">Block1</div><div id="block2">Block2</div> ]]></before>
          <code><![CDATA[$("#go1").click(function(){
  $("#block1").animate( { width: "90%"}, { queue: false, duration: 5000 } )
     .animate( { fontSize: '10em' } , 1000 )
     .animate( { borderWidth: 5 }, 1000);
});

$("#go2").click(function(){
  $("#block2").animate( { width: "90%"}, 1000 )
     .animate( { fontSize: '10em' } , 1000 )
     .animate( { borderWidth: 5 }, 1000);
});]]></code>
        </example>
        <example>
          <desc><![CDATA[第二个按钮按了之后就是一个传统的链式动画，即等前一个动画完成后，后一个动画才会开始.]]></desc>
          <before><![CDATA[<button id="go1">» Animate Block1</button>
<button id="go2">» Animate Block2</button>
<div id="block1">Block1</div><div id="block2">Block2</div> ]]></before>
          <code><![CDATA[$("#go1").click(function(){
  $("#block1").animate( { width: "90%"}, { queue: false, duration: 5000 } )
     .animate( { fontSize: '10em' } , 1000 )
     .animate( { borderWidth: 5 }, 1000);
});

$("#go2").click(function(){
  $("#block2").animate( { width: "90%"}, 1000 )
     .animate( { fontSize: '10em' } , 1000 )
     .animate( { borderWidth: 5 }, 1000);
});]]></code>
        </example>
        <example>
          <desc><![CDATA[用600毫秒切换段落的高度和透明度]]></desc>
          <code><![CDATA[$("p").animate({
   height: 'toggle', opacity: 'toggle'
 }, { duration: "slow" });]]></code>
        </example>
        <example>
          <desc><![CDATA[用500毫秒将段落移到left为50的地方并且完全清晰显示出来（透明度为1） ]]></desc>
          <code><![CDATA[$("p").animate({
   left: 50, opacity: 'show'
 }, { duration: 500 });]]></code>
        </example>
        <example>
          <desc><![CDATA[一个使用“easein”函数提供不同动画样式的例子。只有使用了插件来提供这个“easein”函数，这个参数才起作用。]]></desc>
          <code><![CDATA[$("p").animate({
   opacity: 'show'
 }, { duration: "slow", easing: "easein" });]]></code>
        </example>
      </method>
      <method name="stop" type="jQuery" short="停止所有在指定元素上正在运行的动画。">
        <desc><![CDATA[如果队列中有等待执行的动画(并且clearQueue没有设为true)，他们将被马上执行]]></desc>
        <param name="clearQueue" type="Boolean" optional="true">
          <desc>可选，如果设置成true，则清空队列。可以立即结束动画。</desc>
        </param>
        <param name="gotoEnd" type="Boolean" optional="true">
          <desc>可选，让当前正在执行的动画立即完成，并且重设show和hide的原始样式，调用回调函数等。</desc>
        </param>
        <example>
          <desc><![CDATA[点击Go之后开始动画,点Stop之后会在当前位置停下来]]></desc>
          <before><![CDATA[<button id="go">Go</button> <button id="stop">STOP!</button>
<div class="block"></div><button id="go">Go</button> <button id="stop">STOP!</button>
<div class="block"></div>]]></before>
          <code><![CDATA[// 开始动画
$("#go").click(function(){
  $(".block").animate({left: '+200px'}, 5000);
});

// 当点击按钮后停止动画
$("#stop").click(function(){
  $(".block").stop();
});]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="设置">
      <method name="jQuery.fx.off" type="Boolean" short="关闭页面上所有的动画。">
        <desc><![CDATA[<p>把这个属性设置为true可以立即关闭所有动画(所有效果会立即执行完毕)。有些情况下可能需要这样，比如：</p><p>* 你在配置比较低的电脑上使用jQuery。</p><p>* 你的一些用户由于动画效果而遇到了 <a href="http://www.jdeegan.phlegethon.org/turn_off_animation.html">可访问性问题</a></p><p>当把这个属性设成false之后，可以重新开启所有动画。</p>]]></desc>
        <example>
          <desc><![CDATA[执行一个禁用的动画]]></desc>
          <code><![CDATA[  jQuery.fx.off = true;
  $("input").click(function(){
      $("div").toggle("slow");
  });]]></code>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="Ajax">
    <subcat name="Ajax 请求">
      <method name="jQuery.ajax" type="XMLHttpRequest" short="通过 HTTP 请求加载远程数据。">
        <desc><![CDATA[jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。<p>$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该对象，但特殊情况下可用于手动终止请求。</p><p>$.ajax() 只有一个参数：参数 key/value 对象，包含各配置及回调函数信息。详细参数选项见下。</p><p><strong>注意：</strong> 如果你指定了 dataType 选项，请确保服务器返回正确的 MIME 信息，(如 xml 返回 "text/xml")。错误的 MIME 类型可能导致不可预知的错误。见 <a href="http://docs.jquery.com/Specifying_the_Data_Type_for_AJAX_Requests" title="Specifying the Data Type for AJAX Requests">Specifying the Data Type for AJAX Requests</a> 。</p><p><strong>注意：</strong>如果dataType设置为"script"，那么在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)</p><p>jQuery 1.2 中，您可以跨域加载 JSON 数据，使用时需将数据类型设置为 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a>。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。数据类型设置为 "jsonp" 时，jQuery 将自动调用回调函数。</p>]]></desc>
        <param name="options" type="可选" optional="true">
          <desc>AJAX 请求设置。所有选项都是可选的。</desc>
        </param>
        <option name="async" type="Boolean">
          <desc>(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。</desc>
        </option>
        <option name="beforeSend" type="Function">
          <desc><![CDATA[发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。这是一个 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。如果返回false可以取消本次ajax请求。]]></desc>
          <code>function (XMLHttpRequest) {
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="cache" type="Boolean">
          <desc>(默认: true,dataType为script时默认为false) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。</desc>
        </option>
        <option name="complete" type="Function">
          <desc><![CDATA[请求完成后回调函数 (请求成功或失败时均调用)。参数：  XMLHttpRequest 对象和一个描述成功请求类型的字符串。 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
        <code>function (XMLHttpRequest, textStatus) {
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="contentType" type="String">
          <desc>(默认: "application/x-www-form-urlencoded") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。</desc>
        </option>
        <option name="data" type="Object,String">
          <desc>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&amp;foo=bar1&amp;foo=bar2'。</desc>
        </option>
        <option name="dataFilter" type="Function">
          <desc><![CDATA[给Ajax返回的原始数据的进行预处理的函数。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。]]></desc>
          <code>function (data, type) {
    // 对Ajax返回的原始数据进行预处理
    return data  // 返回处理后的数据
}</code>
        </option>
        <option name="dataType" type="String">
          <desc><![CDATA[(默认值：智能判断xml或者html)预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值:<br />
"xml": 返回 XML 文档，可用 jQuery 处理。<br />
"html": 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。<br />
"script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了"cache"参数。<strong>注意：</strong>在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)<br />
"json": 返回 JSON 数据 。<br />
"jsonp": <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 格式。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。<br />
"text": 返回纯文本字符串]]></desc>
        </option>
        <option name="error" type="Function">
          <desc><![CDATA[(默认: 自动判断 (xml 或 html)) 请求失败时调用时间。参数有以下三个：XMLHttpRequest 对象、错误信息、（可选）捕获的错误对象。如果发生了错误，错误信息（第二个参数）除了得到null之外，还可能是"timeout", "error", "notmodified" 和 "parsererror"。<a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
          <code>function (XMLHttpRequest, textStatus, errorThrown) {
    // 通常 textStatus 和 errorThrown 之中
    // 只有一个会包含信息
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="global" type="Boolean">
          <desc><![CDATA[(默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
        </option>
        <option name="ifModified" type="Boolean">
          <desc>(默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。</desc>
        </option>
        <option name="jsonp" type="String">
          <desc>在一个jsonp请求中重写回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。</desc>
        </option>
        <option name="password" type="String">
          <desc>用于响应HTTP访问认证请求的密码</desc>
        </option>
        <option name="processData" type="Boolean">
          <desc>(默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</desc>
        </option>
        <option name="scriptCharset" type="String">
          <desc>只有当请求时dataType为"jsonp"或"script"，并且type是"GET"才会用于强制修改charset。通常在本地和远程的内容编码不同时使用。</desc>
        </option>
        <option name="success" type="Function">
          <desc><![CDATA[请求成功后的回调函数。参数：由服务器返回，并根据dataType参数进行处理后的数据；描述状态的字符串。 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
          <code>function (data, textStatus) {
    // data 可能是 xmlDoc, jsonObj, html, text, 等等...
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="timeout" type="Number">
          <desc>设置请求超时时间（毫秒）。此设置将覆盖全局设置。</desc>
        </option>
        <option name="type" type="String">
          <desc>(默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</desc>
        </option>
        <option name="url" type="String">
          <desc>(默认: 当前页地址) 发送请求的地址。</desc>
        </option>
        <option name="username" type="String">
          <desc>用于响应HTTP访问认证请求的用户名</desc>
        </option>
        <option name="xhr" type="Function">
          <desc>需要返回一个XMLHttpRequest 对象。默认在IE下是ActiveXObject 而其他情况下是XMLHttpRequest 。用于重写或者提供一个增强的XMLHttpRequest 对象。这个参数在jQuery 1.3以前不可用。</desc>
        </option>
        <example>
          <desc><![CDATA[加载并执行一个 JS 文件。]]></desc>
          <code><![CDATA[$.ajax({
  type: "GET",
  url: "test.js",
  dataType: "script"
});]]></code>
        </example>
        <example>
          <desc><![CDATA[保存数据到服务器，成功时显示信息。]]></desc>
          <code><![CDATA[$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&amp;location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
});]]></code>
        </example>
        <example>
          <desc><![CDATA[装入一个 HTML 网页最新版本。]]></desc>
          <code><![CDATA[$.ajax({
  url: "test.html",
  cache: false,
  success: function(html){
    $("#results").append(html);
  }
});]]></code>
        </example>
        <example>
          <desc><![CDATA[同步加载数据。发送请求时锁住浏览器。需要锁定用户交互操作时使用同步方式。 ]]></desc>
          <code><![CDATA[ var html = $.ajax({
  url: "some.php",
  async: false
 }).responseText; ]]></code>
        </example>
        <example>
          <desc><![CDATA[发送 XML 数据至服务器。设置 processData 选项为 false，防止自动转换数据格式。]]></desc>
          <code><![CDATA[ var xmlDocument = [create xml document];
 $.ajax({
   url: "page.php",
   processData: false,
   data: xmlDocument,
   success: handleResponse
 });]]></code>
        </example>
      </method>
      <method name="load" type="jQuery" short="载入远程 HTML 文件代码并插入至 DOM 中。">
        <desc><![CDATA[默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 "url #some > selector"。请查看示例。]]></desc>
        <param name="url" type="String">
          <desc>待装入 HTML 网页网址。</desc>
        </param>
        <param name="data" type="Map,String" optional="true">
          <desc>(可选) 发送至服务器的 key/value 数据。在jQuery 1.3中也可以接受一个字符串了。</desc>
        </param>
        <param name="callback" type="Callback" optional="true">
          <desc>(可选) 载入成功时回调函数。</desc>
        </param>
        <example>
          <desc><![CDATA[加载文章侧边栏导航部分至一个无序列表。 ]]></desc>
          <before><![CDATA[<b>jQuery Links:</b>
<ul id="links"></ul> ]]></before>
          <code><![CDATA[$("#links").load("/Main_Page #p-Getting-Started li"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[加载 feeds.html 文件内容。]]></desc>
          <code><![CDATA[$("#feeds").load("feeds.html"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[同上，但是以 POST 形式发送附加参数并在成功时显示信息。 ]]></desc>
          <code><![CDATA[ $("#feeds").load("feeds.php", {limit: 25}, function(){
   alert("The last 25 entries in the feed have been loaded");
 });]]></code>
        </example>
      </method>
      <method name="jQuery.get" type="XMLHttpRequest" short="通过远程 HTTP GET 请求载入信息。">
        <desc><![CDATA[这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。]]></desc>
        <param name="url" type="String">
          <desc>待载入页面的URL地址</desc>
        </param>
        <param name="data" type="Map" optional="true">
          <desc>(可选) 待发送 Key/value 参数。</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 载入成功时回调函数。</desc>
        </param>
        <param name="type" type="String" optional="true">
          <desc>(可选) 返回内容格式，xml, html, script, json, text, _default。</desc>
        </param>
        <example>
          <desc><![CDATA[请求 test.php 网页，忽略返回值。 ]]></desc>
          <code><![CDATA[$.get("test.php"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[请求 test.php 网页，传送2个参数，忽略返回值。 ]]></desc>
          <code><![CDATA[$.get("test.php", { name: "John", time: "2pm" } ); ]]></code>
        </example>
        <example>
          <desc><![CDATA[显示 test.php 返回值(HTML 或 XML，取决于返回值)。]]></desc>
          <code><![CDATA[$.get("test.php", function(data){
  alert("Data Loaded: " + data);
});]]></code>
        </example>
        <example>
          <desc><![CDATA[显示 test.cgi 返回值(HTML 或 XML，取决于返回值)，添加一组请求参数。]]></desc>
          <code><![CDATA[$.get("test.cgi", { name: "John", time: "2pm" },
  function(data){
    alert("Data Loaded: " + data);
  });]]></code>
        </example>
      </method>
      <method name="jQuery.getJSON" type="XMLHttpRequest" short="通过 HTTP GET 请求载入 JSON 数据。">
        <desc><![CDATA[在 jQuery 1.2 中，您可以通过使用<a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式的回调函数来加载其他网域的JSON数据，如 "myurl?callback=?"。jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。 <p></p> 注意：此行以后的代码将在这个回调函数执行前执行。]]></desc>
        <param name="url" type="String">
          <desc>发送请求地址。</desc>
        </param>
        <param name="data" type="Map" optional="true">
          <desc>(可选) 待发送 Key/value 参数。</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 载入成功时回调函数。</desc>
        </param>
        <example>
          <desc><![CDATA[从 Flickr JSONP API 载入 4 张最新的关于猫的图片。]]></desc>
          <before><![CDATA[<div id="images"></div> ]]></before>
          <code><![CDATA[$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?tags=cat&amp;tagmode=any&amp;format=json&amp;jsoncallback=?", function(data){
  $.each(data.items, function(i,item){
    $("<img/>").attr("src", item.media.m).appendTo("#images");
    if ( i == 3 ) return false;
  });
});]]></code>
        </example>
        <example>
          <desc><![CDATA[从 test.js 载入 JSON 数据并显示 JSON 数据中一个 name 字段数据。 ]]></desc>
          <code><![CDATA[$.getJSON("test.js", function(json){
  alert("JSON Data: " + json.users[3].name);
});]]></code>
        </example>
        <example>
          <desc><![CDATA[从 test.js 载入 JSON 数据，附加参数，显示 JSON 数据中一个 name 字段数据。]]></desc>
          <code><![CDATA[$.getJSON("test.js", { name: "John", time: "2pm" }, function(json){
  alert("JSON Data: " + json.users[3].name);
});]]></code>
        </example>
      </method>
      <method name="jQuery.getScript" type="XMLHttpRequest" short="通过 HTTP GET 请求载入并执行一个 JavaScript 文件。">
        <desc><![CDATA[jQuery 1.2 版本之前，getScript 只能调用同域 JS 文件。 1.2中，您可以跨域调用 JavaScript 文件。注意：Safari 2 或更早的版本不能在全局作用域中同步执行脚本。如果通过 getScript 加入脚本，请加入延时函数。]]></desc>
        <param name="url" type="String">
          <desc>待载入 JS 文件地址。</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 成功载入后回调函数。</desc>
        </param>
        <example>
          <desc><![CDATA[载入 <a title="http://jquery.com/plugins/project/color" class="external text" href="http://jquery.com/plugins/project/color">jQuery 官方颜色动画插件</a> 成功后绑定颜色变化动画。]]></desc>
          <before><![CDATA[<button id="go">» Run</button>
<div class="block"></div> ]]></before>
          <code><![CDATA[jQuery.getScript("http://dev.jquery.com/view/trunk/plugins/color/jquery.color.js", function(){
  $("#go").click(function(){
    $(".block").animate( { backgroundColor: 'pink' }, 1000)
      .animate( { backgroundColor: 'blue' }, 1000);
  });
});]]></code>
        </example>
        <example>
          <desc><![CDATA[加载并执行 test.js。]]></desc>
          <code><![CDATA[$.getScript("test.js"); ]]></code>
        </example>
        <example>
          <desc><![CDATA[加载并执行 test.js ，成功后显示信息。]]></desc>
          <code><![CDATA[$.getScript("test.js", function(){
  alert("Script loaded and executed.");
});]]></code>
        </example>
      </method>
      <method name="jQuery.post" type="XMLHttpRequest" short="通过远程 HTTP POST 请求载入信息。">
        <desc><![CDATA[这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。]]></desc>
        <param name="url" type="String">
          <desc>发送请求地址。</desc>
        </param>
        <param name="data" type="Map" optional="true">
          <desc>(可选) 待发送 Key/value 参数。</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 发送成功时回调函数。</desc>
        </param>
        <param name="type" type="String" optional="true">
          <desc>(可选) 返回内容格式，xml, html, script, json, text, _default。</desc>
        </param>
      </method>
    </subcat>
    <subcat name="Ajax 事件">
      <method name="ajaxComplete" type="jQuery" short="AJAX 请求完成时执行函数。Ajax 事件。">
        <desc><![CDATA[XMLHttpRequest 对象和设置作为参数传递给回调函数。]]></desc>
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <example>
          <desc><![CDATA[AJAX 请求完成时执行函数。]]></desc>
          <code><![CDATA[ $("#msg").ajaxComplete(function(event,request, settings){
   $(this).append("<li>请求完成.</li>");
 });]]></code>
        </example>
      </method>
      <method name="ajaxError" type="jQuery" short="AJAX 请求发生错误时执行函数。Ajax 事件。">
        <desc><![CDATA[XMLHttpRequest 对象和设置作为参数传递给回调函数。捕捉到的错误可作为最后一个参数传递。]]></desc>
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <param name="" type="function (event, XMLHttpRequest, ajaxOptions, thrownError) {      // thrownError 只有当异常发生时才会被传递      this; // 监听的 dom 元素}">
          <desc>function (event, XMLHttpRequest, ajaxOptions, thrownError) {
      // thrownError 只有当异常发生时才会被传递
      this; // 监听的 dom 元素
}</desc>
        </param>
        <example>
          <desc><![CDATA[AJAX 请求失败时显示信息。 ]]></desc>
          <code><![CDATA[$("#msg").ajaxError(function(event,request, settings){
     $(this).append("<li>出错页面:" + settings.url + "</li>");
});]]></code>
        </example>
      </method>
      <method name="ajaxSend" type="jQuery" short="AJAX 请求发送前执行函数。Ajax 事件。">
        <desc><![CDATA[XMLHttpRequest 对象和设置作为参数传递给回调函数。]]></desc>
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <example>
          <desc><![CDATA[AJAX 请求发送前显示信息。]]></desc>
          <code><![CDATA[ $("#msg").ajaxSend(function(evt, request, settings){
   $(this).append("<li>开始请求: " + settings.url + "</li>");
 });]]></code>
        </example>
      </method>
      <method name="ajaxStart" type="jQuery" short="AJAX 请求开始时执行函数。Ajax 事件。">
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <example>
          <desc><![CDATA[AJAX 请求开始时显示信息。]]></desc>
          <code><![CDATA[ $("#loading").ajaxStart(function(){
   $(this).show();
 });]]></code>
        </example>
      </method>
      <method name="ajaxStop" type="jQuery" short="AJAX 请求结束时执行函数。Ajax 事件。">
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <example>
          <desc><![CDATA[AJAX 请求结束后隐藏信息。]]></desc>
          <code><![CDATA[ $("#loading").ajaxStop(function(){
   $(this).hide();
 });]]></code>
        </example>
      </method>
      <method name="ajaxSuccess" type="jQuery" short="AJAX 请求成功时执行函数。Ajax 事件。">
        <desc><![CDATA[XMLHttpRequest 对象和设置作为参数传递给回调函数。]]></desc>
        <param name="callback" type="Function">
          <desc>待执行函数</desc>
        </param>
        <example>
          <desc><![CDATA[当 AJAX 请求成功后显示消息。]]></desc>
          <code><![CDATA[ $("#msg").ajaxSuccess(function(evt, request, settings){
   $(this).append("<li>请求成功!</li>");
 });]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="其它">
      <method name="jQuery.ajaxSetup" type="jQuery" short="设置全局 AJAX 默认选项。">
        <desc><![CDATA[参数见 '$.ajax' 说明。]]></desc>
        <param name="options" type="可选" optional="true">
          <desc>选项设置。所有设置项均为可选设置。.</desc>
        </param>
        <example>
          <desc><![CDATA[设置 AJAX 请求默认地址为 "/xmlhttp/"，禁止触发全局 AJAX 事件，用 POST 代替默认 GET 方法。其后的 AJAX 请求不再设置任何选项参数。]]></desc>
          <code><![CDATA[$.ajaxSetup({
  url: "/xmlhttp/",
  global: false,
  type: "POST"
});
$.ajax({ data: myData });]]></code>
        </example>
      </method>
      <method name="serialize" type="jQuery" short="序列表表格内容为字符串。">
        <example>
          <desc><![CDATA[序列表表格内容为字符串，用于 Ajax 请求。 ]]></desc>
          <before><![CDATA[<p id="results"><b>Results: </b> </p>
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select><br/>
  <input type="checkbox" name="check" value="check1"/> check1
  <input type="checkbox" name="check" value="check2" checked="checked"/> check2
  <input type="radio" name="radio" value="radio1" checked="checked"/> radio1
  <input type="radio" name="radio" value="radio2"/> radio2
</form> ]]></before>
          <code><![CDATA[$("#results").append( "<tt>" + $("form").serialize() + "</tt>" ); ]]></code>
        </example>
      </method>
      <method name="serializeArray" type="jQuery" short="序列化表格元素 (类似 '.serialize()' 方法) 返回 JSON 数据结构数据。">
        <example>
          <desc><![CDATA[取得表单内容并插入到网页中。 ]]></desc>
          <before><![CDATA[<p id="results"><b>Results:</b> </p>
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select><br/>
  <input type="checkbox" name="check" value="check1"/> check1
  <input type="checkbox" name="check" value="check2" checked="checked"/> check2
  <input type="radio" name="radio" value="radio1" checked="checked"/> radio1
  <input type="radio" name="radio" value="radio2"/> radio2
</form> ]]></before>
          <code><![CDATA[var fields = $("select, :radio").serializeArray();
jQuery.each( fields, function(i, field){
  $("#results").append(field.value + " ");
});]]></code>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="工具">
    <subcat name="浏览器">
      <method name="jQuery.support" type="Boolean" short="jQuery 1.3 新增。一组用于展示不同浏览器各自特性和bug的属性集合。">
        <desc><![CDATA[<p>jQuery提供了一系列属性，你也可以自由增加你自己的属性。其中许多属性是很低级的，所以很难说他们能否在日新月异的发展中一直保持有效，但这这些主要用于插件和内核开发者。</p><p>所有这些支持的属性值都通过特性检测来实现，而不是用任何浏览器检测。以下有一些非常棒的资源用于解释这些特性检测是如何工作的：</p><ul><li>http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</li><li>http://yura.thinkweb2.com/cft/</li><li>http://www.jibbering.com/faq/faq_notes/not_browser_detect.html</li></ul><p></p><p>jQuery.support主要包括以下测试：</p><p><strong>boxModel</strong>: 如果这个页面和浏览器是以W3C CSS盒式模型来渲染的，则等于true。通常在IE 6和IE 7的怪癖模式中这个值是false。在document准备就绪前，这个值是null。</p><p><strong>cssFloat</strong>: 如果用cssFloat来访问CSS的float的值，则返回true。目前在IE中会返回false,他用styleFloat代替。</p><p><strong>hrefNormalized</strong>: 如果浏览器从getAttribute("href")返回的是原封不动的结果，则返回true。在IE中会返回false，因为他的URLs已经常规化了。</p><p><strong>htmlSerialize</strong>: 如果浏览器通过innerHTML插入链接元素的时候会序列化这些链接，则返回true，目前IE中返回false。</p><p><strong>leadingWhitespace</strong>: 如果在使用innerHTML的时候浏览器会保持前导空白字符，则返回true，目前在IE 6-8中返回false。</p><p><strong>noCloneEvent</strong>: 如果浏览器在克隆元素的时候不会连同事件处理函数一起复制，则返回true，目前在IE中返回false。</p><p><strong>objectAll</strong>: 如果在某个元素对象上执行getElementsByTagName("*")会返回所有子孙元素，则为true，目前在IE 7中为false。</p><p><strong>opacity</strong>: 如果浏览器能适当解释透明度样式属性，则返回true，目前在IE中返回false，因为他用alpha滤镜代替。</p><p><strong>scriptEval</strong>: 使用 appendChild/createTextNode 方法插入脚本代码时，浏览器是否执行脚步，目前在IE中返回false，IE使用 .text 方法插入脚本代码以执行。</p><p><strong>style</strong>: 如果getAttribute("style")返回元素的行内样式，则为true。目前IE中为false，因为他用cssText代替。</p><p><strong>tbody</strong>: 如果浏览器允许table元素不包含tbody元素，则返回true。目前在IE中会返回false，他会自动插入缺失的tbody。</p>]]></desc>
        <example>
          <desc><![CDATA[检测浏览器是否支持盒式模型]]></desc>
          <code><![CDATA[jQuery.support.boxModel]]></code>
        </example>
      </method>
      <method name="jQuery.browser" type="Map" short="浏览器内核标识。依据 navigator.userAgent 判断。">
        <desc><![CDATA[可用值: <p> safari </p><p> opera </p><p> msie </p><p> mozilla </p> <p>此属性在 DOM 树加载完成前即有效，可用于为特定浏览器设置 ready 事件。 </p><p>浏览器对象检测技术与此属性共同使用可提供可靠的浏览器检测支持。</p>]]></desc>
        <example>
          <desc><![CDATA[在 Microsoft's Internet Explorer 浏览器中返回 true。]]></desc>
          <code><![CDATA[$.browser.msie ]]></code>
        </example>
        <example>
          <desc><![CDATA[仅在 Safari 中提示 "this is safari!" 。]]></desc>
          <code><![CDATA[if ($.browser.safari) {
   alert("this is safari!");
} ]]></code>
        </example>
      </method>
      <method name="jQuery.browser.version" type="String" short="浏览器渲染引擎版本号。">
        <desc><![CDATA[典型结果: <p> Internet Explorer: 6.0, 7.0 </p><p> Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3 </p><p> Opera: 9.20 </p><p> Safari/Webkit: 312.8, 418.9</p>]]></desc>
        <example>
          <desc><![CDATA[显示当前 IE 浏览器版本号。 ]]></desc>
          <code><![CDATA[if ( $.browser.msie )
 alert( $.browser.version ); ]]></code>
        </example>
      </method>
      <method name="jQuery.boxModel" type="Boolean" short="当前页面中浏览器是否使用标准盒模型渲染页面。 建议使用 jQuery.support.boxModel 代替。W3C CSS 盒模型.">
        <example>
          <desc><![CDATA[在 Internet Explorer 怪癖模式（QuirksMode）中返回 False。]]></desc>
          <code><![CDATA[$.boxModel ]]></code>
        </example>
      </method>
    </subcat>
    <subcat name="数组和对象操作">
      <method name="jQuery.each" type="Object" short="通用例遍方法，可用于例遍对象和数组。">
        <desc><![CDATA[不同于例遍 jQuery 对象的 $().each() 方法，此方法可用于例遍任何对象。<p>回调函数拥有两个参数：第一个为对象的成员或数组的索引，第二个为对应变量或内容。</p>如果需要退出 each 循环可使回调函数返回 false，其它返回值将被忽略。]]></desc>
        <param name="object" type="Object">
          <desc>需要例遍的对象或数组。</desc>
        </param>
        <param name="callback" type="Function" optional="true">
          <desc>(可选) 每个成员/元素执行的回调函数。</desc>
        </param>
        <example>
          <desc><![CDATA[例遍数组，同时使用元素索引和内容。]]></desc>
          <code><![CDATA[$.each( [0,1,2], function(i, n){
  alert( "Item #" + i + ": " + n );
});]]></code>
        </example>
        <example>
          <desc><![CDATA[例遍对象，同时使用成员名称和变量内容。 ]]></desc>
          <code><![CDATA[$.each( { name: "John", lang: "JS" }, function(i, n){
  alert( "Name: " + i + ", Value: " + n );
});]]></code>
        </example>
      </method>
      <method name="jQuery.extend" type="Object" short="用一个或多个其他对象来扩展一个对象，返回被扩展的对象。">
        <desc><![CDATA[用于简化继承。]]></desc>
        <param name="target" type="Object">
          <desc>待修改对象。</desc>
        </param>
        <param name="object1" type="Object">
          <desc>待合并到第一个对象的对象。</desc>
        </param>
        <param name="objectN" type="Object" optional="true">
          <desc>(可选) 待合并到第一个对象的对象。</desc>
        </param>
        <example>
          <desc><![CDATA[合并 settings 和 options，修改并返回 settings。]]></desc>
          <code><![CDATA[var settings = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };
jQuery.extend(settings, options); ]]></code>
          <result><![CDATA[settings == { validate: true, limit: 5, name: "bar" } ]]></result>
        </example>
        <example>
          <desc><![CDATA[合并 defaults 和 options, 不修改 defaults。]]></desc>
          <code><![CDATA[var empty = {}
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };
var settings = jQuery.extend(empty, defaults, options); ]]></code>
          <result><![CDATA[settings == { validate: true, limit: 5, name: "bar" }
empty == { validate: true, limit: 5, name: "bar" }]]></result>
        </example>
      </method>
      <method name="jQuery.grep" type="Array" short="使用过滤函数过滤数组元素。">
        <desc><![CDATA[此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。]]></desc>
        <param name="array" type="Array">
          <desc>待过滤数组。</desc>
        </param>
        <param name="callback" type="Function">
          <desc>此函数将处理数组每个元素。第一个参数为当前元素，第二个参数而元素索引值。此函数应返回一个布尔值。另外，此函数可设置为一个字符串，当设置为字符串时，将视为“lambda-form”（缩写形式？），其中 a 代表数组元素，i 代表元素索引值。如“a > 0”代表“function(a){ return a > 0; }”。</desc>
        </param>
        <param name="invert" type="Boolean" optional="true">
          <desc>(可选) 如果 "invert" 为 false 或为设置，则函数返回数组中由过滤函数返回 true 的元素，当"invert" 为 true，则返回过滤函数中返回 false 的元素集。</desc>
        </param>
        <example>
          <desc><![CDATA[过滤数组中小于 0 的元素。 ]]></desc>
          <code><![CDATA[$.grep( [0,1,2], function(n,i){
  return n > 0;
});]]></code>
          <result><![CDATA[[1, 2] ]]></result>
        </example>
        <example>
          <desc><![CDATA[排除数组中大于 0 的元素，使用第三个参数进行排除。 ]]></desc>
          <code><![CDATA[$.grep( [0,1,2], function(n,i){
  return n > 0;
}, true); ]]></code>
          <result><![CDATA[[0] ]]></result>
        </example>
      </method>
      <method name="jQuery.makeArray" type="Array" short="将类数组对象转换为数组对象。">
        <desc><![CDATA[类数组对象有 length 属性，其成员索引为 0 至 length - 1。实际中此函数在 jQuery 中将自动使用而无需特意转换。]]></desc>
        <param name="obj" type="Object">
          <desc>类数组对象。</desc>
        </param>
        <example>
          <desc><![CDATA[过滤数组中小于 0 的元素。 ]]></desc>
          <before><![CDATA[<div>First</div><div>Second</div><div>Third</div><div>Fourth</div>]]></before>
          <code><![CDATA[var arr = jQuery.makeArray(document.getElementsByTagName("div"));
arr.reverse(); // 使用数组翻转函数]]></code>
          <result><![CDATA[Fourth
Third
Second
First]]></result>
        </example>
      </method>
      <method name="jQuery.map" type="Array" short="将一个数组中的元素转换到另一个数组中。">
        <desc><![CDATA[作为参数的转换函数会为每个数组元素调用，而且会给这个转换函数传递一个表示被转换的元素作为参数。转换函数可以返回转换后的值、null（删除数组中的项目）或一个包含值的数组，并扩展至原始数组中。]]></desc>
        <param name="array" type="Array">
          <desc>待转换数组。</desc>
        </param>
        <param name="callback" type="Function">
          <desc>为每个数组元素调用，而且会给这个转换函数传递一个表示被转换的元素作为参数。函数可返回任何值。另外，此函数可设置为一个字符串，当设置为字符串时，将视为“lambda-form”（缩写形式？），其中 a 代表数组元素。如“a * a”代表“function(a){ return a * a; }”。</desc>
        </param>
        <example>
          <desc><![CDATA[将原数组中每个元素加 4 转换为一个新数组。]]></desc>
          <code><![CDATA[$.map( [0,1,2], function(n){
  return n + 4;
});]]></code>
          <result><![CDATA[[4, 5, 6] ]]></result>
        </example>
        <example>
          <desc><![CDATA[原数组中大于 0 的元素加 1 ，否则删除。]]></desc>
          <code><![CDATA[$.map( [0,1,2], function(n){
  return n > 0 ? n + 1 : null;
});]]></code>
          <result><![CDATA[[2, 3] ]]></result>
        </example>
        <example>
          <desc><![CDATA[原数组中每个元素扩展为一个包含其本身和其值加 1 的数组，并转换为一个新数组。]]></desc>
          <code><![CDATA[$.map( [0,1,2], function(n){
  return [ n, n + 1 ];
});]]></code>
          <result><![CDATA[[0, 1, 1, 2, 2, 3] ]]></result>
        </example>
      </method>
      <method name="jQuery.inArray" type="jQuery" short="确定第一个参数在数组中的位置(如果没有找到则返回 -1 )。">
        <param name="value" type="Any">
          <desc>用于在数组中查找是否存在</desc>
        </param>
        <param name="array" type="Array">
          <desc>待处理数组。</desc>
        </param>
        <example>
          <desc><![CDATA[删除重复 div 标签。]]></desc>
          <code><![CDATA[var arr = [ 4, "Pete", 8, "John" ];
jQuery.inArray("John", arr);  //3
jQuery.inArray(4, arr);  //0
jQuery.inArray("David", arr);  //-1]]></code>
        </example>
      </method>
      <method name="jQuery.unique" type="jQuery" short="删除数组中重复元素。">
        <param name="array" type="Array">
          <desc>待处理数组。</desc>
        </param>
        <example>
          <desc><![CDATA[删除重复 div 标签。]]></desc>
          <code><![CDATA[$.unique(document.getElementsByTagName("div")); ]]></code>
          <result><![CDATA[[<div>, <div>, ...]]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="测试操作">
      <method name="jQuery.isArray" type="Boolean" short="jQuery 1.3 新增。测试对象是否为数组。">
        <param name="obj" type="Object">
          <desc>用于测试是否为数组的对象</desc>
        </param>
        <example>
          <desc><![CDATA[检测是否为数组]]></desc>
          <code><![CDATA[$("b").append( "" + $.isArray([]) );]]></code>
          <result><![CDATA[<b>true</b>]]></result>
        </example>
      </method>
      <method name="jQuery.isFunction" type="Boolean" short="测试对象是否为函数。">
        <param name="obj" type="Object">
          <desc>用于测试是否为函数的对象</desc>
        </param>
        <example>
          <desc><![CDATA[检测是否为函数]]></desc>
          <code><![CDATA[    function stub() {
    }
var objs = [
            function () {},
            { x:15, y:20 },
            null,
            stub,
            "function"
          ];
        jQuery.each(objs, function (i) {
        var isFunc = <strong>jQuery.isFunction</strong>(objs[i]);
        $("span:eq( " + i + ")").text(isFunc);
      });  ]]></code>
          <result><![CDATA[[ true,false,false,true,false ]]]></result>
        </example>
      </method>
    </subcat>
    <subcat name="字符串操作">
      <method name="jQuery.trim" type="jQuery" short="去掉字符串起始和结尾的空格。">
        <param name="str" type="String">
          <desc>需要处理的字符串</desc>
        </param>
        <example>
          <desc><![CDATA[去掉字符串起始和结尾的空格。 ]]></desc>
          <code><![CDATA[$.trim("  hello, how are you?  "); ]]></code>
          <result><![CDATA["hello, how are you?"]]></result>
        </example>
      </method>
    </subcat>
  </cat>
  <cat name="关于">
    <subcat name="关于翻译">
      <method name="关于jQuery 1.3 版翻译" type="" short=""/>
      <method name="关于jQuery 1.2 版翻译" type="" short="">
        <desc>首先感谢 为之漫笔 。他是1.1API的翻译者。1.2的翻译是完全基于1.1的API翻译的，拜一记。本次翻译临近结束时，由他翻译的Learning jQuery 的中文版《jQuery基础教程》即将出版。作为国内jQuery的引路人的他，我由衷地向他表示感谢！其次感谢 Ross Wan 写的这个仿Visiul jQuery的样式。本次翻译是基于他的英文版制作的。(由于GFW缘故，其博客请通过代理访问)最后感谢 Cloudream,他也一起参与翻译了工具、原Dimensions插件和AJAX部分。并且加入了英文说明切换功能。断断续续翻译这个API有段时间了，虽然大部分都基于1.1的API复制过来，但也得校对以及跟官网的文档进行比较。所以也花了点时间。同时欢迎利用此版制作其他发行版以方便广大jQuery爱好者。转载请保留版权信息，谢谢。</desc>
      </method>
    </subcat>
    <subcat name="提交bug及获取更新">
      <method name="提交bug及获取更新" type="" short=""/>
    </subcat>
  </cat>
</docs>
