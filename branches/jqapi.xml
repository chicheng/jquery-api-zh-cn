<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type='text/xsl' href='style/style.xsl'?>
      <method name="jQuery.ajax" type="XMLHttpRequest" short="通过 HTTP 请求加载远程数据。">
        <desc><![CDATA[jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。<p>$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该对象，但特殊情况下可用于手动终止请求。</p><p>$.ajax() 只有一个参数：参数 key/value 对象，包含各配置及回调函数信息。详细参数选项见下。</p><p><strong>注意：</strong> 如果你指定了 dataType 选项，请确保服务器返回正确的 MIME 信息，(如 xml 返回 "text/xml")。错误的 MIME 类型可能导致不可预知的错误。见 <a href="http://docs.jquery.com/Specifying_the_Data_Type_for_AJAX_Requests" title="Specifying the Data Type for AJAX Requests">Specifying the Data Type for AJAX Requests</a> 。</p><p><strong>注意：</strong>如果dataType设置为"script"，那么在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)</p><p>jQuery 1.2 中，您可以跨域加载 JSON 数据，使用时需将数据类型设置为 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a>。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。数据类型设置为 "jsonp" 时，jQuery 将自动调用回调函数。</p>]]></desc>
        <param name="options" type="可选" optional="true">
          <desc>AJAX 请求设置。所有选项都是可选的。</desc>
        </param>
        <option name="async" type="Boolean">
          <desc>(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。</desc>
        </option>
        <option name="beforeSend" type="Function">
          <desc><![CDATA[发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。这是一个 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。如果返回false可以取消本次ajax请求。]]></desc>
          <code>function (XMLHttpRequest) {
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="cache" type="Boolean">
          <desc>(默认: true,dataType为script时默认为false) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。</desc>
        </option>
        <option name="complete" type="Function">
          <desc><![CDATA[请求完成后回调函数 (请求成功或失败时均调用)。参数：  XMLHttpRequest 对象和一个描述成功请求类型的字符串。 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
        <code>function (XMLHttpRequest, textStatus) {
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="contentType" type="String">
          <desc>(默认: "application/x-www-form-urlencoded") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。</desc>
        </option>
        <option name="data" type="Object,String">
          <desc>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&amp;foo=bar1&amp;foo=bar2'。</desc>
        </option>
        <option name="dataFilter" type="Function">
          <desc><![CDATA[给Ajax返回的原始数据的进行预处理的函数。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。]]></desc>
          <code>function (data, type) {
    // 对Ajax返回的原始数据进行预处理
    return data  // 返回处理后的数据
}</code>
        </option>
        <option name="dataType" type="String">
          <desc><![CDATA[(默认值：智能判断xml或者html)预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值:<br />
"xml": 返回 XML 文档，可用 jQuery 处理。<br />
"html": 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。<br />
"script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了"cache"参数。<strong>注意：</strong>在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)<br />
"json": 返回 JSON 数据 。<br />
"jsonp": <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 格式。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" class="external text" title="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a> 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。<br />
"text": 返回纯文本字符串]]></desc>
        </option>
        <option name="error" type="Function">
          <desc><![CDATA[(默认: 自动判断 (xml 或 html)) 请求失败时调用时间。参数有以下三个：XMLHttpRequest 对象、错误信息、（可选）捕获的错误对象。如果发生了错误，错误信息（第二个参数）除了得到null之外，还可能是"timeout", "error", "notmodified" 和 "parsererror"。<a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
          <code>function (XMLHttpRequest, textStatus, errorThrown) {
    // 通常 textStatus 和 errorThrown 之中
    // 只有一个会包含信息
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="global" type="Boolean">
          <desc><![CDATA[(默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
        </option>
        <option name="ifModified" type="Boolean">
          <desc>(默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。</desc>
        </option>
        <option name="jsonp" type="String">
          <desc>在一个jsonp请求中重写回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。</desc>
        </option>
        <option name="password" type="String">
          <desc>用于响应HTTP访问认证请求的密码</desc>
        </option>
        <option name="processData" type="Boolean">
          <desc>(默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</desc>
        </option>
        <option name="scriptCharset" type="String">
          <desc>只有当请求时dataType为"jsonp"或"script"，并且type是"GET"才会用于强制修改charset。通常在本地和远程的内容编码不同时使用。</desc>
        </option>
        <option name="success" type="Function">
          <desc><![CDATA[请求成功后的回调函数。参数：由服务器返回，并根据dataType参数进行处理后的数据；描述状态的字符串。 <a href="http://docs.jquery.com/Ajax_Events" title="Ajax Events">Ajax 事件</a>。]]></desc>
          <code>function (data, textStatus) {
    // data 可能是 xmlDoc, jsonObj, html, text, 等等...
    this; // 调用本次AJAX请求时传递的options参数
}</code>
        </option>
        <option name="timeout" type="Number">
          <desc>设置请求超时时间（毫秒）。此设置将覆盖全局设置。</desc>
        </option>
        <option name="type" type="String">
          <desc>(默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</desc>
        </option>
        <option name="url" type="String">
          <desc>(默认: 当前页地址) 发送请求的地址。</desc>
        </option>
        <option name="username" type="String">
          <desc>用于响应HTTP访问认证请求的用户名</desc>
        </option>
        <option name="xhr" type="Function">
          <desc>需要返回一个XMLHttpRequest 对象。默认在IE下是ActiveXObject 而其他情况下是XMLHttpRequest 。用于重写或者提供一个增强的XMLHttpRequest 对象。这个参数在jQuery 1.3以前不可用。</desc>
        </option>
        <example>
          <desc><![CDATA[加载并执行一个 JS 文件。]]></desc>
          <code><![CDATA[$.ajax({
  type: "GET",
  url: "test.js",
  dataType: "script"
});]]></code>
        </example>
        <example>
          <desc><![CDATA[保存数据到服务器，成功时显示信息。]]></desc>
          <code><![CDATA[$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&amp;location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
});]]></code>
        </example>
        <example>
          <desc><![CDATA[装入一个 HTML 网页最新版本。]]></desc>
          <code><![CDATA[$.ajax({
  url: "test.html",
  cache: false,
  success: function(html){
    $("#results").append(html);
  }
});]]></code>
        </example>
        <example>
          <desc><![CDATA[同步加载数据。发送请求时锁住浏览器。需要锁定用户交互操作时使用同步方式。 ]]></desc>
          <code><![CDATA[ var html = $.ajax({
  url: "some.php",
  async: false
 }).responseText; ]]></code>
        </example>
        <example>
          <desc><![CDATA[发送 XML 数据至服务器。设置 processData 选项为 false，防止自动转换数据格式。]]></desc>
          <code><![CDATA[ var xmlDocument = [create xml document];
 $.ajax({
   url: "page.php",
   processData: false,
   data: xmlDocument,
   success: handleResponse
 });]]></code>
        </example>
      </method>
